{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"torchserve%E8%B8%A9%E5%9D%91/","text":"\u5982\u4f55\u6253\u5305\u4e00\u4e2a\u6a21\u578b\u5728torchserve\u4e0a Dependency \u5b89\u88c5\u597dtorchserve\u73af\u5883 \u4e00\u822c\u65b9\u6cd5\uff08\u5f88\u4e45\u524d\u6d4b\u8bd5\uff0c\u5982\u679c\u6709bug\u81ea\u67e5\u89e3\u51b3\uff09 \u62c9\u53d6image docker pull pytorch/torchserve:0.5.2-cpu \u8fd0\u884c docker run -d --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models pytorch/torchserve:0.5.2-cpu torchserve --start --model-store /tmp/models/ --no-config-snapshots /data/MengQingqiang/rpc/model_store \u662f\u6307\u5b9a\u5bbf\u4e3b\u673a\u6a21\u578b\u5b58\u50a8\u4f4d\u7f6e 6080 \u63a8\u7406http\u63a5\u53e3 6081 \u6a21\u578b\u7ba1\u7406 http\u63a5\u53e3 7070 \u63a8\u7406grpc\u63a5\u53e3 7071\u6a21\u578b\u7ba1\u7406 grpc\u63a5\u53e3 \u672c\u4eba\u4fdd\u5b58\u8fc7\u7684\u955c\u50cf \u6ce8\u610f\uff1a \u5982\u679c\u4f60\u752848\u53f7\u670d\u52a1\u5668\uff0c\u672c\u4eba\u4fdd\u5b58\u4e86\u4e00\u4e2a\u955c\u50cf torchserer:v1.2.1 \u8fd9\u4e2a\u62fc\u5199\u9519\u8bef\u5ffd\u7565 \u6216\u8005\u91cd\u65b0commit\u4e00\u4e2a\u6b63\u786e\u7684\u4f7f\u7528 \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef docker run --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models torchserer:v1.2.1 torchserve --start --model-store /tmp/models/ --models greedy_distance.mar --no-config-snapshots \u5982\u679c\u7aef\u53e3\u663e\u793a\u5360\u7528\uff0c\u67e5\u770b\u5bb9\u5668\u662f\u5426\u8fd0\u884c\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u5728\u8fd0\u884c\uff0c\u56e0\u4e3a\u63fd\u4ef6\u5e73\u53f0\u4f9d\u8d56\u8fd9\u4e2a\u670d\u52a1 \u9700\u8981\u5b89\u88c5torch-model-archiver pip install torch-model-archiver \u6ce8\u610f\u91c7\u7528pip \u6216\u8005conda\u7684\u65b9\u5f0f\u5b89\u88c5\uff0c\u907f\u514d\u91c7\u7528yum apt-get\u7b49\u65b9\u5f0f\u7ed1\u5b9a\u5230\u7cfb\u7edfpython\u800c\u975econda\u865a\u62df\u73af\u5883python \u53ef\u4ee5\u91c7\u7528 which torch-model-archiver \u67e5\u770b\u4f7f\u7528\u4e86\u54ea\u4e2a\u5305\u7ba1\u7406\u4e0b\u7684\u8f6f\u4ef6\uff0c\u5229\u7528alias\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684 Quick Start \u62c9\u53d6serve\u6e90\u4ee3\u7801 git clone https://github.com/pytorch/serve.git # \u91cd\u547d\u540d\u4e3aserve\u6587\u4ef6\u5939 mv serve-master serve \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u6587\u4ef6\u5939\u4e2d\u5305\u542bexamples\u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u53c8\u5206\u4e3a\u56fe\u50cf\u5206\u7c7b\u3001\u56fe\u50cf\u5206\u5272\u7b49\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5939\u5c31\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5305\u542b\u4e86\u5404\u79cd\u6a21\u578b\u6253\u5305\u7684\u793a\u4f8b \u6253\u5305\u4ee3\u7801 \u6211\u4eec\u6253\u5305\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u4e3e\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u6817\u5b50\uff0c\u8fd8\u8bb0\u5f97mnist\u5417\uff1f examples/image_classiffer/mnist\u6587\u4ef6\u5939\u4e2d\u5305\u542b\u4e86\u8bf4\u660e readme\u6587\u4ef6 # \u786e\u4fdd\u8fdb\u5165serve\u6587\u4ef6\u5939 cd serve # \u67e5\u770b\u5f53\u524d\u73af\u5883torch-model-archiver,\u786e\u4fdd\u91c7\u7528\u7684conda\u73af\u5883\u662f\u5b89\u88c5torch-model-archiver\u6b63\u786e\u7684\u73af\u5883 wihch torch-model-archiver # \u6253\u5305 torch-model-archiver --model-name mnist --version 1.0 --model-file examples/image_classifier/mnist/mnist.py --handler examples/image_classifier/mnist/mnist_handler.py # \u67e5\u770b\u4ea7\u7269 ls -l | grep mnist.mar \u4e0a\u4f20\u5230serve\u670d\u52a1\u5668 \u4e00\u5171\u5b58\u5728\u4e24\u79cd\u65b9\u5f0f local file \u628a*.mar\u7684\u6587\u4ef6\u590d\u5236\u5230serve\u672c\u5730\u7684\u6a21\u578b\u6587\u4ef6\u5939\uff08\u5728\u542f\u52a8torchserver\u65f6\u6307\u5b9a--model-store\u53c2\u6570\u7684\u6587\u4ef6\u5939\uff09 \u6211\u4eec\u4ee5211.71.76.189 gpu-48\u53f7\u670d\u52a1\u5668\u4f5c\u4e3a\u793a\u4f8b\uff0c\u8be5\u670d\u52a1\u5668\u4e0a\u5b58\u5728\u4e00\u4e2atorchserve\u670d\u52a1\uff0c\u4e14\u6587\u4ef6\u5939\u5728/data/MengQingqiang/rpc/model_store/\u4e0b\uff0c\u6a21\u578b\u7ba1\u7406http\u7aef\u53e3\u662f6081 cp mnist.mar /data/MengQingqiang/rpc/model_store/ \u200b \u8fd9\u65f6\u5019\u6a21\u578b\u6587\u4ef6\u5c31\u5b58\u5728\u672c\u5730\uff0c\u7136\u540e\u8c03\u7528http\u63a5\u53e3\u8ba9serve\u670d\u52a1\u5668\u8fd0\u884c\u8fd9\u4e2a\u6a21\u578b curl --location --request POST 'http://211.71.76.189:6081/models?url=mnist.mar' \u200b \u7136\u540e\u6211\u4eec\u67e5\u770b\u90e8\u7f72\u7ed3\u679c curl --location --request GET 'http://211.71.76.189:6081/models/' \u6211\u4eec\u53ef\u4ee5\u628a\u5f53\u524d\u7684\u5305\u542b*.mar\u76ee\u5f55\u4f5c\u4e3a\u4e00\u4e2ahttp\u670d\u52a1\u5668\uff0c\u8ba9torchserve\u4e0b\u8f7d*.mar\u6587\u4ef6\u540e\u8fd0\u884c \u9996\u5148\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55\u6765\u907f\u514d\u628a\u6574\u4e2aserve\u6e90\u7801\u4f5c\u4e3a\u670d\u52a1\u5668 mkdir -p model_store mv mnist.mar model_store/ cd model_store # \u52a0 & \u4ee3\u8868\u5b88\u62a4\u8fdb\u7a0b\u65b9\u5f0f\uff0c\u9000\u51fa\u5f53\u524d\u4f1a\u8bdd\u540e\u81ea\u52a8\u5173\u95ed\uff0c\u5982\u679c\u4e00\u76f4\u9700\u8981\u8bf7\u4f7f\u7528screen\uff0c\u4e0d\u63a8\u8350nohup python -m http.server 8090 & \u5728\u6d4f\u89c8\u5668\u6253\u5f00\u5f53\u524d\u670d\u52a1\u5668http://ip:8090 \u53ef\u4ee5\u770b\u5230\u76ee\u5f55\u7ed3\u6784\uff0c\u4ee548\u53f7\u670d\u52a1\u5668\u505a\u793a\u4f8b http://211.71.76.189:8090/ \u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7http\u63a5\u53e3\u8fdb\u884c\u6a21\u578b\u4e0a\u4f20\u5230serve\uff0c\u540c\u65b9\u6cd51\u4e2d curl --location --request POST 'http://211.71.76.189:6081/models?url=http://211.71.76.189:8090/mnist.mar' \u540c\u6837\u67e5\u770b\u90e8\u7f72\u7ed3\u679c curl --location --request GET 'http://211.71.76.189:6081/models/' \u6211\u4eec\u770b\u5230\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b { \"models\": [ { \"modelName\": \"greedy_distance\", \"modelUrl\": \"greedy_distance.mar\" }, { \"modelName\": \"greedy_time\", \"modelUrl\": \"greedy_time.mar\" }, { \"modelName\": \"mnist\", \"modelUrl\": \"http://211.71.76.189:8090/mnist.mar\" }, { \"modelName\": \"pointer_net\", \"modelUrl\": \"pointer_net.mar\" } ] } \u5176\u4e2dmnist\u662f\u7f51\u7edc\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u672c\u5730\u4f4d\u7f6e \u6d4b\u8bd5 \u9996\u5148\uff0c\u6a21\u578b\u521d\u59cb\u5316\u6ca1\u6709\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u6211\u4eec\u8c03\u6574mnist\u6a21\u578bworker\u6570\u91cf curl --location --request PUT 'http://211.71.76.189:6081/models/mnist?min_worker=1&max_worker=2' \u7528\u8fd9\u4e2a\u547d\u4ee4\u624d\u8bbf\u95eeapi\u63a5\u53e3\uff0c\u4f60\u4f1a\u60ca\u559c\u7684\u53d1\u73b0 \u62a5\u9519\u4e86\uff0c\u662f\u7684 \u5b98\u65b9\u63d0\u4f9b\u7684\u4ee3\u7801\u6709bug # \u6211\u4eec\u8fd4\u56deserve\u6587\u4ef6\u5939 cd serve # curl http://211.71.76.189:6080/explanations/mnist -T examples/image_classifier/mnist/test_data/0.png \u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u81f3\u5c11\u5b8c\u6210\u4e86\u5168\u751f\u547d\u5468\u671f\u7684\u6d41\u7a0b\uff0c\u8fd9\u91cc\u7684bug\u6e90\u81ea\u4e8e\u5b98\u65b9\u7684mnist\u7684handler bug\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\uff0c\u6211\u4f1a\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199handler\uff0c\u5982\u4f55\u67e5\u770bbug\u53d1\u751f\u5728\u54ea\u91cc\uff0c\u5982\u4f55\u67e5\u770b\u65e5\u5fd7 Serve my own model \u200b \u662f\u7684\uff0c\u5982\u679c\u4f60\u5b8c\u6210\u4e86\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u4f60\u4f1a\u53d1\u73b0torchsere\u6ca1\u6709\u4eba\u7528\u7684\u6839\u672c\u539f\u56e0\uff1a\u8d44\u6599\u5f88\u5c11\u4e14\u5b58\u5728bug \u200b \u4e0b\u9762\u6211\u5c06\u4e3a\u4f60\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u5c5e\u4e8e\u81ea\u5df1\u7684\u4ee3\u7801 \u4e3a\u4ec0\u4e48\u5f15\u5165handler\uff1f \u200b \u9996\u5148\uff0c\u6211\u4eec\u8981\u660e\u767d\u4e00\u4e2a\u9053\u7406\uff0c\u6211\u4eec\u7684\u6a21\u578b\u662f\u65e0\u6cd5\u76f4\u63a5\u9002\u914d\u5230serve\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u673a\u5236\uff0c\u5982\u4f55\u53bb\u544a\u8bc9serve\u6211\u4eec\u7684\u6a21\u578b\u5904\u7406\u673a\u5236\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u5f15\u5165\u4e00\u4e2ahandler\uff0c\u8bf4\u8d77\u6765\u6709\u70b9\u4e71\uff0c\u6211\u4eec\u753b\u4e00\u4e2a\u56fe\u6765\u7406\u89e3 \u200b \u8fd9\u91cc\u4ec5\u4ec5\u662f\u903b\u8f91\u5c42\u9762\u65b9\u4fbf\u7406\u89e3\uff0chandler\u6587\u4ef6torch\u5b98\u65b9\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u7840\u7684handler\uff0c\u5728\u6587\u4ef6\u5939 ts/torch_handler\u4e2d \u200b handler\u8981\u6c42\u5fc5\u987b\u7ee7\u627f\u4e8ebase_handler.py \u200b base_handler\u4e2d\u5305\u542b\u4e86\u4ee5\u4e0b\u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 \u5907\u6ce8 initialize \u521d\u59cb\u5316\u65b9\u6cd5 \u7528\u4e8e\u6307\u5b9agpu\uff0c\u6784\u9020\u521d\u59cb\u6a21\u578b\uff0c\u52a0\u8f7d\u6a21\u578b\u6743\u91cd\uff0c preprocess \u9884\u5904\u7406\u65b9\u6cd5 \u7528\u4e8e\u5bf9\u4e8erequest\u52a0\u5de5\u9884\u5904\u7406\u6570\u636e\u5230\u6a21\u578b\u6307\u5b9a\u683c\u5f0f inference \u63a8\u7406\u65b9\u6cd5\uff08\u9884\u6d4b\uff09 \u7528\u4e8e\u8c03\u7528initialize\u6784\u9020\u540e\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u9884\u6d4b postprocess \u7ed3\u679c\u683c\u5f0f\u5316\u65b9\u6cd5 \u8fd0\u884c\u7ed3\u675f\u65f6\u7684\u903b\u8f91\uff0c\u628a\u6a21\u578b\u8f93\u51fa\u7ed3\u679c\u91cd\u65b0\u6574\u7406\u6210\u60f3\u8981\u7684\u683c\u5f0f handle \u63a8\u7406\u8fc7\u7a0b \u7ec4\u7ec7preprocess\uff0cinference\uff0cpostprocess\u65b9\u6cd5\uff0c\u6bcf\u5f53serve\u9047\u5230\u4e00\u6b21\u8bf7\u6c42\uff0c\u53ea\u6307\u5b9a\u8be5\u65b9\u6cd5 \u6211\u4eec\u67e5\u770bhandle\u65b9\u6cd5\u6e90\u7801\u5c31\u53ef\u4ee5\u66f4\u597d\u7406\u89e3\u8be5\u8fc7\u7a0b def handle(self, data, context): \"\"\"Entry point for default handler. It takes the data from the input request and returns the predicted outcome for the input. Args: data (list): The input data that needs to be made a prediction request on. context (Context): It is a JSON Object containing information pertaining to the model artefacts parameters. Returns: list : Returns a list of dictionary with the predicted response. \"\"\" # It can be used for pre or post processing if needed as additional request # information is available in context start_time = time.time() self.context = context metrics = self.context.metrics # \u9996\u5148\u8fdb\u884c\u9884\u5904\u7406 data_preprocess = self.preprocess(data) # \u5224\u65ad\u65f6\u63a8\u65ad\u8fd8\u662f\u89e3\u91ca if not self._is_explain(): # \u63a8\u7406 output = self.inference(data_preprocess) # \u540e\u5904\u7406 output = self.postprocess(output) else: output = self.explain_handle(data_preprocess, data) stop_time = time.time() metrics.add_time('HandlerTime', round( (stop_time - start_time) * 1000, 2), None, 'ms') # \u8fd4\u56de\u7ed3\u679c return output \u753b\u56fe\u63cf\u8ff0handle\u65b9\u6cd5\u5185\u5bb9 \u52a8\u624b\u5199\u4e00\u4e2amodel \u548c handler \u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u65e0\u53c2\u6570\u6a21\u578b\u5f00\u59cb\u5199\u8d77 import torch import torch.nn as nn import torch.nn.functional as F import numpy as np class GreedyTime(nn.Module): ''' \u7403\u9762\u8ddd\u79bb\u8d2a\u5fc3\u7b56\u7565\uff0c\u65e0\u53c2\u6570 \u8f93\u5165: \u671f\u671b\u5230\u8fbe\u65f6\u95f4,\u8d77\u70b9\u5750\u6807 ''' def __init__(self): super(GreedyTime, self).__init__() def forward(self, x): (time_need, start) = x time_need = time_need.argsort() result = [start] for item in time_need: if item != start: result.append(item) return result \u5bf9\u5e94handler\u5982\u4e0b import json from torchvision import transforms from ts.torch_handler.image_classifier import ImageClassifier from ts.torch_handler.base_handler import BaseHandler import torch import logging import time import numpy as np from scipy.spatial.distance import pdist, squareform logger = logging.getLogger(__name__) class Greedy_Hander(BaseHandler): def handle(self, data, context): \"\"\"Entry point for default handler. It takes the data from the input request and returns the predicted outcome for the input. Args: data (list): The input data that needs to be made a prediction request on. context (Context): It is a JSON Object containing information pertaining to the model artefacts parameters. Returns: list : Returns a list of dictionary with the predicted response. \"\"\" # It can be used for pre or post processing if needed as additional request # information is available in context start_time = time.time() self.context = context metrics = self.context.metrics data_preprocess = self.preprocess(data) if not self._is_explain(): output = self.inference(data_preprocess) output = self.postprocess(output) else: output = self.explain_handle(data_preprocess, data) stop_time = time.time() metrics.add_time('HandlerTime', round( (stop_time - start_time) * 1000, 2), None, 'ms') return output def inference(self, data, *args, **kwargs): \"\"\" The Inference Function is used to make a prediction call on the given input request. The user needs to override the inference function to customize it. Args: data (Torch Tensor): A Torch Tensor is passed to make the Inference Request. The shape should match the model input shape. Returns: Torch Tensor : The Predicted Torch Tensor is returned in this function. \"\"\" logger.info('Inference come') results = self.model(data, *args, **kwargs) return results def postprocess(self, data): \"\"\" The post process function makes use of the output from the inference and converts into a Torchserve supported response output. Args: data (Torch Tensor): The torch tensor received from the prediction output of the model. Returns: List: The post process function returns a list of the predicted output. \"\"\" # logger.info(\"spring Data output:\", data.toString()) # print(\"[MQQ ]\", data) data = torch.tensor(data).tolist() return [data] def preprocess(self, data): \"\"\" Preprocess function to convert the request input to a tensor(Torchserve supported format). The user needs to override to customize the pre-processing Args : data (list): List of the data from the request input. [{'body': [[1, 2, 3], [1, 2, 3]]}] the input of your data is this format Returns: tensor: Returns the tensor data of the input \"\"\" # not support batch to deal ''' { \"feature\": [ [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ], [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ] ], \"start\": 1} ''' logger.info(\"[hander] greedy_time raw data: %s\" % str(data)) body = data[0].get('body') logger.info(\"[hander] greedy_time body type: %s\" % str(type(body))) if type(body) == bytearray: # to deal with grpc interface body = bytes(body) body = json.loads(body) logger.info(\"[handler] from grpc\") else: logger.info(\"[handler] from http api\") logger.info(\"[handler] greedy_time body :%s \" %str(body)) logger.info(\"[handler] greedy_time body after type: %s\" % str(type(body))) # logger.info(\"[handler] greedy_distance input:\", data) feature = body.get('feature') start = body.get('start') # logger.info(\"[handler] greedy_distance input:\", data) # \u8f6c\u6362feature\u4e3a ndarray feature = np.array(feature) # select for the distance of feature # logger.info(\"[hander] greedy_distance feature shape :\", feature.shape) logger.info(\"[hander] greedy_time feature: %s\", str(feature)) feature = feature[:, 0] logger.info(\"[hander] greedy_time feature after: %s\", str(feature)) # logger.info(\"[hander] greedy_distance feature:\", feature) model_input = (feature, start) logger.info(\"process ok\") return model_input handler\u4e2d\u5728preprocess\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u7ea6\u5b9a\u4e86\u8f93\u5165\u683c\u5f0f\u4e3a\u4ee5\u4e0b\u7684json\u4e32\uff0c\u7136\u540e\u5728\u9884\u5904\u7406\u6309\u7167\u8be5\u683c\u5f0f\u89e3\u6790 { \"feature\": [ [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ], [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ] ], \"start\": 1 } \u628a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u653e\u5728example\u4e0b\uff0c\u7c7b\u4f3c\u4e8equick start \u8fd0\u884c\u6253\u5305\u547d\u4ee4 torch-model-archiver --model-name greedy_time --model-file ../serve/examples/image_classifier/greedy_time/greedy_time.py --handler ../serve/examples/image_classifier/greedy_time/greedy_time_handler.py --runtime python3 --version 1.0 \u6309\u7167quick start\u65b9\u5f0f\u4e0a\u4f20\u5230serve \u8c03\u7528\u63a5\u53e3 curl --location --request POST 'http://211.71.76.189:6080/predictions/greedy_time/1.0' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"feature\": [ [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ], [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ] ], \"start\": 1 }' \u5f97\u5230\u7ed3\u679c [ 1, 0 ] tips \u6a21\u578b\u6587\u4ef6 model.py\u4ec5\u4ec5\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u7c7b\uff0c \u5982\u679c\u6211\u7684\u6a21\u578b\u5305\u62ecmodel_layers.py model.py \u5e76\u4e14model.py\u662f\u591a\u4e2a\u7c7b\u5982\u4f55\u89e3\u51b3\uff1f \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b0\u6587\u4ef6model_submit.py\u4e2d \u628a\u6700\u7ec8\u7684\u6a21\u578b\u7c7b\u518d\u5c01\u88c5\u4e00\u5c42\uff0c\u5728\u6253\u5305\u65f6\u6307\u5b9a\u53c2\u6570extra-files bash torch-model-archiver --model-name pointer_net --model-file ../serve/examples/image_classifier/pointer_net/pointer_net.py \\ --handler ../serve/examples/image_classifier/pointer_net/pointer_net_handler.py \\ --extra-files ../serve/examples/image_classifier/pointer_net/pointer_net_layers.py \\ --runtime python3 --version shanghai \u540c\u7406\uff0c\u5982\u679c\u6a21\u578b\u5305\u62ec\u5176\u4ed6\u914d\u7f6e\u6587\u4ef6 \u6bd4\u5982 json yml \u7b49\u4e5f\u53ef\u4ee5\u901a\u8fc7extra-files\u6253\u5165mar\u5305 extra-files \u7684\u4f5c\u7528\u662f\u8ba9\u8be5\u6587\u4ef6\u4e00\u8d77\u6253\u5305\u8fdbmar\uff0c\u6a21\u578b\u53ef\u4ee5\u8bbf\u95ee \u5982\u4f55\u67e5\u770b\u65e5\u5fd7 debug \u4ee5docker\u65b9\u5f0f\u542f\u52a8\u7684serve \u53ef\u4ee5\u91c7\u7528 docker logs -f \u67e5\u770b\u65e5\u5fd7 \u5982\u679c\u6211\u9700\u8981\u66f4\u591a\u7684python\u5305\u600e\u4e48\u529e \u8fdb\u5165\u5bb9\u5668\u5b89\u88c5 \u4e3a\u4ec0\u4e48\u6211\u8bbf\u95ee\u63a5\u53e3400 500 \u547d\u4ee4\u5b58\u5728\u9519\u8bef \u6216\u8005\u6307\u5b9a\u7684\u5185\u5bb9\u975e\u6cd5\uff0c\u67e5\u770b\u65e5\u5fd7\u4e2d\u539f\u56e0 \u4e3a\u4ec0\u4e48\u6211\u8fdc\u7a0b\u52a0\u8f7d\u6a21\u578b\u5931\u8d25\uff0c\u663e\u793a\u672c\u5730\u5df2\u7ecf\u5b58\u5728\u4e00\u4e2a\u5305 \u5982\u679c\u672c\u5730\u5b58\u5728x.mar\u5219\u8fdc\u7a0b\u65e0\u6cd5\u52a0\u8f7d\u65b0\u7684\u540c\u540dmar\u5305\uff0c\u539f\u56e0\uff1aserve\u4f1a\u4e0b\u8f7dmar\u5305\u5230\u672c\u5730\u76ee\u5f55\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u518d\u5378\u8f7d\u8be5\u6a21\u578b\u540e\u4f1a\u5220\u9664\u672c\u5730mar\u5305\uff0c\u56e0\u6b64\u5982\u679c\u4e0b\u8f7d\u663e\u793a\u672c\u5730\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u4e0d\u4f1a\u7ee7\u7eed\u540e\u7eed\u64cd\u4f5c \u63a5\u53e3\u4e00\u5b9a\u7528\u547d\u4ee4\u884c\u8bbf\u95ee\u5417\uff1f \u4e0d\u4e00\u5b9a\uff0c\u56e0\u4e3a\u662fhttp\u63a5\u53e3\uff0c\u6240\u4ee5\u4efb\u4f55\u901a\u8fc7http\u7684\u65b9\u5f0f\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u6bd4\u5982postman\u3001\u7a0b\u5e8f\u4ee3\u7801 \u90fd\u53ef\u4ee5 \u5b98\u65b9\u6587\u6863\u5728\u54ea\u91cc\uff1f https://pytorch.org/serve/index.html \u5982\u4f55\u67e5\u770b\u63a5\u53e3\uff1f \u5982\u4f55\u901a\u8fc7grpc\u8bbf\u95ee\uff1f \u67e5\u770bpostrpc\u9879\u76ee\u793a\u4f8b","title":"Torchserve\u8e29\u5751"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#torchserve","text":"","title":"\u5982\u4f55\u6253\u5305\u4e00\u4e2a\u6a21\u578b\u5728torchserve\u4e0a"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#dependency","text":"\u5b89\u88c5\u597dtorchserve\u73af\u5883","title":"Dependency"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#bug","text":"\u62c9\u53d6image docker pull pytorch/torchserve:0.5.2-cpu \u8fd0\u884c docker run -d --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models pytorch/torchserve:0.5.2-cpu torchserve --start --model-store /tmp/models/ --no-config-snapshots /data/MengQingqiang/rpc/model_store \u662f\u6307\u5b9a\u5bbf\u4e3b\u673a\u6a21\u578b\u5b58\u50a8\u4f4d\u7f6e 6080 \u63a8\u7406http\u63a5\u53e3 6081 \u6a21\u578b\u7ba1\u7406 http\u63a5\u53e3 7070 \u63a8\u7406grpc\u63a5\u53e3 7071\u6a21\u578b\u7ba1\u7406 grpc\u63a5\u53e3","title":"\u4e00\u822c\u65b9\u6cd5\uff08\u5f88\u4e45\u524d\u6d4b\u8bd5\uff0c\u5982\u679c\u6709bug\u81ea\u67e5\u89e3\u51b3\uff09"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#_1","text":"\u6ce8\u610f\uff1a \u5982\u679c\u4f60\u752848\u53f7\u670d\u52a1\u5668\uff0c\u672c\u4eba\u4fdd\u5b58\u4e86\u4e00\u4e2a\u955c\u50cf torchserer:v1.2.1 \u8fd9\u4e2a\u62fc\u5199\u9519\u8bef\u5ffd\u7565 \u6216\u8005\u91cd\u65b0commit\u4e00\u4e2a\u6b63\u786e\u7684\u4f7f\u7528 \u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u5373\u53ef docker run --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models torchserer:v1.2.1 torchserve --start --model-store /tmp/models/ --models greedy_distance.mar --no-config-snapshots \u5982\u679c\u7aef\u53e3\u663e\u793a\u5360\u7528\uff0c\u67e5\u770b\u5bb9\u5668\u662f\u5426\u8fd0\u884c\uff0c\u4e00\u822c\u6765\u8bf4\u90fd\u5728\u8fd0\u884c\uff0c\u56e0\u4e3a\u63fd\u4ef6\u5e73\u53f0\u4f9d\u8d56\u8fd9\u4e2a\u670d\u52a1 \u9700\u8981\u5b89\u88c5torch-model-archiver pip install torch-model-archiver \u6ce8\u610f\u91c7\u7528pip \u6216\u8005conda\u7684\u65b9\u5f0f\u5b89\u88c5\uff0c\u907f\u514d\u91c7\u7528yum apt-get\u7b49\u65b9\u5f0f\u7ed1\u5b9a\u5230\u7cfb\u7edfpython\u800c\u975econda\u865a\u62df\u73af\u5883python \u53ef\u4ee5\u91c7\u7528 which torch-model-archiver \u67e5\u770b\u4f7f\u7528\u4e86\u54ea\u4e2a\u5305\u7ba1\u7406\u4e0b\u7684\u8f6f\u4ef6\uff0c\u5229\u7528alias\u53ef\u4ee5\u6307\u5b9a\u5177\u4f53\u7684","title":"\u672c\u4eba\u4fdd\u5b58\u8fc7\u7684\u955c\u50cf"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#quick-start","text":"\u62c9\u53d6serve\u6e90\u4ee3\u7801 git clone https://github.com/pytorch/serve.git # \u91cd\u547d\u540d\u4e3aserve\u6587\u4ef6\u5939 mv serve-master serve \u6211\u4eec\u53ef\u4ee5\u770b\u5230\u8fd9\u4e2a\u6587\u4ef6\u5939\u4e2d\u5305\u542bexamples\u7684\u6587\u4ef6\u5939\uff0c\u5176\u4e2d\u53c8\u5206\u4e3a\u56fe\u50cf\u5206\u7c7b\u3001\u56fe\u50cf\u5206\u5272\u7b49\uff0c\u8fd9\u4e2a\u6587\u4ef6\u5939\u5c31\u662f\u4e00\u4e2a\u793a\u4f8b\uff0c\u5305\u542b\u4e86\u5404\u79cd\u6a21\u578b\u6253\u5305\u7684\u793a\u4f8b \u6253\u5305\u4ee3\u7801 \u6211\u4eec\u6253\u5305\u793a\u4f8b\u7a0b\u5e8f\uff0c\u6211\u4eec\u5c31\u4e3e\u4e00\u4e2a\u6700\u57fa\u672c\u7684\u6817\u5b50\uff0c\u8fd8\u8bb0\u5f97mnist\u5417\uff1f examples/image_classiffer/mnist\u6587\u4ef6\u5939\u4e2d\u5305\u542b\u4e86\u8bf4\u660e readme\u6587\u4ef6 # \u786e\u4fdd\u8fdb\u5165serve\u6587\u4ef6\u5939 cd serve # \u67e5\u770b\u5f53\u524d\u73af\u5883torch-model-archiver,\u786e\u4fdd\u91c7\u7528\u7684conda\u73af\u5883\u662f\u5b89\u88c5torch-model-archiver\u6b63\u786e\u7684\u73af\u5883 wihch torch-model-archiver # \u6253\u5305 torch-model-archiver --model-name mnist --version 1.0 --model-file examples/image_classifier/mnist/mnist.py --handler examples/image_classifier/mnist/mnist_handler.py # \u67e5\u770b\u4ea7\u7269 ls -l | grep mnist.mar \u4e0a\u4f20\u5230serve\u670d\u52a1\u5668 \u4e00\u5171\u5b58\u5728\u4e24\u79cd\u65b9\u5f0f local file \u628a*.mar\u7684\u6587\u4ef6\u590d\u5236\u5230serve\u672c\u5730\u7684\u6a21\u578b\u6587\u4ef6\u5939\uff08\u5728\u542f\u52a8torchserver\u65f6\u6307\u5b9a--model-store\u53c2\u6570\u7684\u6587\u4ef6\u5939\uff09 \u6211\u4eec\u4ee5211.71.76.189 gpu-48\u53f7\u670d\u52a1\u5668\u4f5c\u4e3a\u793a\u4f8b\uff0c\u8be5\u670d\u52a1\u5668\u4e0a\u5b58\u5728\u4e00\u4e2atorchserve\u670d\u52a1\uff0c\u4e14\u6587\u4ef6\u5939\u5728/data/MengQingqiang/rpc/model_store/\u4e0b\uff0c\u6a21\u578b\u7ba1\u7406http\u7aef\u53e3\u662f6081 cp mnist.mar /data/MengQingqiang/rpc/model_store/ \u200b \u8fd9\u65f6\u5019\u6a21\u578b\u6587\u4ef6\u5c31\u5b58\u5728\u672c\u5730\uff0c\u7136\u540e\u8c03\u7528http\u63a5\u53e3\u8ba9serve\u670d\u52a1\u5668\u8fd0\u884c\u8fd9\u4e2a\u6a21\u578b curl --location --request POST 'http://211.71.76.189:6081/models?url=mnist.mar' \u200b \u7136\u540e\u6211\u4eec\u67e5\u770b\u90e8\u7f72\u7ed3\u679c curl --location --request GET 'http://211.71.76.189:6081/models/' \u6211\u4eec\u53ef\u4ee5\u628a\u5f53\u524d\u7684\u5305\u542b*.mar\u76ee\u5f55\u4f5c\u4e3a\u4e00\u4e2ahttp\u670d\u52a1\u5668\uff0c\u8ba9torchserve\u4e0b\u8f7d*.mar\u6587\u4ef6\u540e\u8fd0\u884c \u9996\u5148\uff0c\u6211\u4eec\u65b0\u5efa\u4e00\u4e2a\u76ee\u5f55\u6765\u907f\u514d\u628a\u6574\u4e2aserve\u6e90\u7801\u4f5c\u4e3a\u670d\u52a1\u5668 mkdir -p model_store mv mnist.mar model_store/ cd model_store # \u52a0 & \u4ee3\u8868\u5b88\u62a4\u8fdb\u7a0b\u65b9\u5f0f\uff0c\u9000\u51fa\u5f53\u524d\u4f1a\u8bdd\u540e\u81ea\u52a8\u5173\u95ed\uff0c\u5982\u679c\u4e00\u76f4\u9700\u8981\u8bf7\u4f7f\u7528screen\uff0c\u4e0d\u63a8\u8350nohup python -m http.server 8090 & \u5728\u6d4f\u89c8\u5668\u6253\u5f00\u5f53\u524d\u670d\u52a1\u5668http://ip:8090 \u53ef\u4ee5\u770b\u5230\u76ee\u5f55\u7ed3\u6784\uff0c\u4ee548\u53f7\u670d\u52a1\u5668\u505a\u793a\u4f8b http://211.71.76.189:8090/ \u6700\u540e\uff0c\u6211\u4eec\u901a\u8fc7http\u63a5\u53e3\u8fdb\u884c\u6a21\u578b\u4e0a\u4f20\u5230serve\uff0c\u540c\u65b9\u6cd51\u4e2d curl --location --request POST 'http://211.71.76.189:6081/models?url=http://211.71.76.189:8090/mnist.mar' \u540c\u6837\u67e5\u770b\u90e8\u7f72\u7ed3\u679c curl --location --request GET 'http://211.71.76.189:6081/models/' \u6211\u4eec\u770b\u5230\u8f93\u51fa\u7ed3\u679c\u5982\u4e0b { \"models\": [ { \"modelName\": \"greedy_distance\", \"modelUrl\": \"greedy_distance.mar\" }, { \"modelName\": \"greedy_time\", \"modelUrl\": \"greedy_time.mar\" }, { \"modelName\": \"mnist\", \"modelUrl\": \"http://211.71.76.189:8090/mnist.mar\" }, { \"modelName\": \"pointer_net\", \"modelUrl\": \"pointer_net.mar\" } ] } \u5176\u4e2dmnist\u662f\u7f51\u7edc\u4f4d\u7f6e\uff0c\u800c\u4e0d\u662f\u672c\u5730\u4f4d\u7f6e \u6d4b\u8bd5 \u9996\u5148\uff0c\u6a21\u578b\u521d\u59cb\u5316\u6ca1\u6709\u5de5\u4f5c\u7ebf\u7a0b\uff0c\u6211\u4eec\u8c03\u6574mnist\u6a21\u578bworker\u6570\u91cf curl --location --request PUT 'http://211.71.76.189:6081/models/mnist?min_worker=1&max_worker=2' \u7528\u8fd9\u4e2a\u547d\u4ee4\u624d\u8bbf\u95eeapi\u63a5\u53e3\uff0c\u4f60\u4f1a\u60ca\u559c\u7684\u53d1\u73b0 \u62a5\u9519\u4e86\uff0c\u662f\u7684 \u5b98\u65b9\u63d0\u4f9b\u7684\u4ee3\u7801\u6709bug # \u6211\u4eec\u8fd4\u56deserve\u6587\u4ef6\u5939 cd serve # curl http://211.71.76.189:6080/explanations/mnist -T examples/image_classifier/mnist/test_data/0.png \u6ca1\u5173\u7cfb\uff0c\u6211\u4eec\u81f3\u5c11\u5b8c\u6210\u4e86\u5168\u751f\u547d\u5468\u671f\u7684\u6d41\u7a0b\uff0c\u8fd9\u91cc\u7684bug\u6e90\u81ea\u4e8e\u5b98\u65b9\u7684mnist\u7684handler bug\uff0c\u5728\u63a5\u4e0b\u6765\u7684\u7ae0\u8282\uff0c\u6211\u4f1a\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199handler\uff0c\u5982\u4f55\u67e5\u770bbug\u53d1\u751f\u5728\u54ea\u91cc\uff0c\u5982\u4f55\u67e5\u770b\u65e5\u5fd7","title":"Quick Start"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#serve-my-own-model","text":"\u200b \u662f\u7684\uff0c\u5982\u679c\u4f60\u5b8c\u6210\u4e86\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u4f60\u4f1a\u53d1\u73b0torchsere\u6ca1\u6709\u4eba\u7528\u7684\u6839\u672c\u539f\u56e0\uff1a\u8d44\u6599\u5f88\u5c11\u4e14\u5b58\u5728bug \u200b \u4e0b\u9762\u6211\u5c06\u4e3a\u4f60\u4ecb\u7ecd\u5982\u4f55\u7f16\u5199\u4e00\u4e2a\u5c5e\u4e8e\u81ea\u5df1\u7684\u4ee3\u7801","title":"Serve my own model"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#handler","text":"\u200b \u9996\u5148\uff0c\u6211\u4eec\u8981\u660e\u767d\u4e00\u4e2a\u9053\u7406\uff0c\u6211\u4eec\u7684\u6a21\u578b\u662f\u65e0\u6cd5\u76f4\u63a5\u9002\u914d\u5230serve\uff0c\u8fd9\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u4e00\u4e2a\u673a\u5236\uff0c\u5982\u4f55\u53bb\u544a\u8bc9serve\u6211\u4eec\u7684\u6a21\u578b\u5904\u7406\u673a\u5236\uff0c\u8fd9\u65f6\u5019\u9700\u8981\u5f15\u5165\u4e00\u4e2ahandler\uff0c\u8bf4\u8d77\u6765\u6709\u70b9\u4e71\uff0c\u6211\u4eec\u753b\u4e00\u4e2a\u56fe\u6765\u7406\u89e3 \u200b \u8fd9\u91cc\u4ec5\u4ec5\u662f\u903b\u8f91\u5c42\u9762\u65b9\u4fbf\u7406\u89e3\uff0chandler\u6587\u4ef6torch\u5b98\u65b9\u63d0\u4f9b\u4e86\u4e00\u4e9b\u57fa\u7840\u7684handler\uff0c\u5728\u6587\u4ef6\u5939 ts/torch_handler\u4e2d \u200b handler\u8981\u6c42\u5fc5\u987b\u7ee7\u627f\u4e8ebase_handler.py \u200b base_handler\u4e2d\u5305\u542b\u4e86\u4ee5\u4e0b\u65b9\u6cd5 \u65b9\u6cd5\u540d \u4f5c\u7528 \u5907\u6ce8 initialize \u521d\u59cb\u5316\u65b9\u6cd5 \u7528\u4e8e\u6307\u5b9agpu\uff0c\u6784\u9020\u521d\u59cb\u6a21\u578b\uff0c\u52a0\u8f7d\u6a21\u578b\u6743\u91cd\uff0c preprocess \u9884\u5904\u7406\u65b9\u6cd5 \u7528\u4e8e\u5bf9\u4e8erequest\u52a0\u5de5\u9884\u5904\u7406\u6570\u636e\u5230\u6a21\u578b\u6307\u5b9a\u683c\u5f0f inference \u63a8\u7406\u65b9\u6cd5\uff08\u9884\u6d4b\uff09 \u7528\u4e8e\u8c03\u7528initialize\u6784\u9020\u540e\u7684\u6a21\u578b\uff0c\u8fdb\u884c\u9884\u6d4b postprocess \u7ed3\u679c\u683c\u5f0f\u5316\u65b9\u6cd5 \u8fd0\u884c\u7ed3\u675f\u65f6\u7684\u903b\u8f91\uff0c\u628a\u6a21\u578b\u8f93\u51fa\u7ed3\u679c\u91cd\u65b0\u6574\u7406\u6210\u60f3\u8981\u7684\u683c\u5f0f handle \u63a8\u7406\u8fc7\u7a0b \u7ec4\u7ec7preprocess\uff0cinference\uff0cpostprocess\u65b9\u6cd5\uff0c\u6bcf\u5f53serve\u9047\u5230\u4e00\u6b21\u8bf7\u6c42\uff0c\u53ea\u6307\u5b9a\u8be5\u65b9\u6cd5 \u6211\u4eec\u67e5\u770bhandle\u65b9\u6cd5\u6e90\u7801\u5c31\u53ef\u4ee5\u66f4\u597d\u7406\u89e3\u8be5\u8fc7\u7a0b def handle(self, data, context): \"\"\"Entry point for default handler. It takes the data from the input request and returns the predicted outcome for the input. Args: data (list): The input data that needs to be made a prediction request on. context (Context): It is a JSON Object containing information pertaining to the model artefacts parameters. Returns: list : Returns a list of dictionary with the predicted response. \"\"\" # It can be used for pre or post processing if needed as additional request # information is available in context start_time = time.time() self.context = context metrics = self.context.metrics # \u9996\u5148\u8fdb\u884c\u9884\u5904\u7406 data_preprocess = self.preprocess(data) # \u5224\u65ad\u65f6\u63a8\u65ad\u8fd8\u662f\u89e3\u91ca if not self._is_explain(): # \u63a8\u7406 output = self.inference(data_preprocess) # \u540e\u5904\u7406 output = self.postprocess(output) else: output = self.explain_handle(data_preprocess, data) stop_time = time.time() metrics.add_time('HandlerTime', round( (stop_time - start_time) * 1000, 2), None, 'ms') # \u8fd4\u56de\u7ed3\u679c return output \u753b\u56fe\u63cf\u8ff0handle\u65b9\u6cd5\u5185\u5bb9","title":"\u4e3a\u4ec0\u4e48\u5f15\u5165handler\uff1f"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#model-handler","text":"\u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u65e0\u53c2\u6570\u6a21\u578b\u5f00\u59cb\u5199\u8d77 import torch import torch.nn as nn import torch.nn.functional as F import numpy as np class GreedyTime(nn.Module): ''' \u7403\u9762\u8ddd\u79bb\u8d2a\u5fc3\u7b56\u7565\uff0c\u65e0\u53c2\u6570 \u8f93\u5165: \u671f\u671b\u5230\u8fbe\u65f6\u95f4,\u8d77\u70b9\u5750\u6807 ''' def __init__(self): super(GreedyTime, self).__init__() def forward(self, x): (time_need, start) = x time_need = time_need.argsort() result = [start] for item in time_need: if item != start: result.append(item) return result \u5bf9\u5e94handler\u5982\u4e0b import json from torchvision import transforms from ts.torch_handler.image_classifier import ImageClassifier from ts.torch_handler.base_handler import BaseHandler import torch import logging import time import numpy as np from scipy.spatial.distance import pdist, squareform logger = logging.getLogger(__name__) class Greedy_Hander(BaseHandler): def handle(self, data, context): \"\"\"Entry point for default handler. It takes the data from the input request and returns the predicted outcome for the input. Args: data (list): The input data that needs to be made a prediction request on. context (Context): It is a JSON Object containing information pertaining to the model artefacts parameters. Returns: list : Returns a list of dictionary with the predicted response. \"\"\" # It can be used for pre or post processing if needed as additional request # information is available in context start_time = time.time() self.context = context metrics = self.context.metrics data_preprocess = self.preprocess(data) if not self._is_explain(): output = self.inference(data_preprocess) output = self.postprocess(output) else: output = self.explain_handle(data_preprocess, data) stop_time = time.time() metrics.add_time('HandlerTime', round( (stop_time - start_time) * 1000, 2), None, 'ms') return output def inference(self, data, *args, **kwargs): \"\"\" The Inference Function is used to make a prediction call on the given input request. The user needs to override the inference function to customize it. Args: data (Torch Tensor): A Torch Tensor is passed to make the Inference Request. The shape should match the model input shape. Returns: Torch Tensor : The Predicted Torch Tensor is returned in this function. \"\"\" logger.info('Inference come') results = self.model(data, *args, **kwargs) return results def postprocess(self, data): \"\"\" The post process function makes use of the output from the inference and converts into a Torchserve supported response output. Args: data (Torch Tensor): The torch tensor received from the prediction output of the model. Returns: List: The post process function returns a list of the predicted output. \"\"\" # logger.info(\"spring Data output:\", data.toString()) # print(\"[MQQ ]\", data) data = torch.tensor(data).tolist() return [data] def preprocess(self, data): \"\"\" Preprocess function to convert the request input to a tensor(Torchserve supported format). The user needs to override to customize the pre-processing Args : data (list): List of the data from the request input. [{'body': [[1, 2, 3], [1, 2, 3]]}] the input of your data is this format Returns: tensor: Returns the tensor data of the input \"\"\" # not support batch to deal ''' { \"feature\": [ [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ], [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ] ], \"start\": 1} ''' logger.info(\"[hander] greedy_time raw data: %s\" % str(data)) body = data[0].get('body') logger.info(\"[hander] greedy_time body type: %s\" % str(type(body))) if type(body) == bytearray: # to deal with grpc interface body = bytes(body) body = json.loads(body) logger.info(\"[handler] from grpc\") else: logger.info(\"[handler] from http api\") logger.info(\"[handler] greedy_time body :%s \" %str(body)) logger.info(\"[handler] greedy_time body after type: %s\" % str(type(body))) # logger.info(\"[handler] greedy_distance input:\", data) feature = body.get('feature') start = body.get('start') # logger.info(\"[handler] greedy_distance input:\", data) # \u8f6c\u6362feature\u4e3a ndarray feature = np.array(feature) # select for the distance of feature # logger.info(\"[hander] greedy_distance feature shape :\", feature.shape) logger.info(\"[hander] greedy_time feature: %s\", str(feature)) feature = feature[:, 0] logger.info(\"[hander] greedy_time feature after: %s\", str(feature)) # logger.info(\"[hander] greedy_distance feature:\", feature) model_input = (feature, start) logger.info(\"process ok\") return model_input handler\u4e2d\u5728preprocess\u4e2d\uff0c\u6211\u4eec\u9996\u5148\u7ea6\u5b9a\u4e86\u8f93\u5165\u683c\u5f0f\u4e3a\u4ee5\u4e0b\u7684json\u4e32\uff0c\u7136\u540e\u5728\u9884\u5904\u7406\u6309\u7167\u8be5\u683c\u5f0f\u89e3\u6790 { \"feature\": [ [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ], [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ] ], \"start\": 1 } \u628a\u8fd9\u4e24\u4e2a\u6587\u4ef6\u653e\u5728example\u4e0b\uff0c\u7c7b\u4f3c\u4e8equick start \u8fd0\u884c\u6253\u5305\u547d\u4ee4 torch-model-archiver --model-name greedy_time --model-file ../serve/examples/image_classifier/greedy_time/greedy_time.py --handler ../serve/examples/image_classifier/greedy_time/greedy_time_handler.py --runtime python3 --version 1.0 \u6309\u7167quick start\u65b9\u5f0f\u4e0a\u4f20\u5230serve \u8c03\u7528\u63a5\u53e3 curl --location --request POST 'http://211.71.76.189:6080/predictions/greedy_time/1.0' \\ --header 'Content-Type: application/json' \\ --data-raw '{ \"feature\": [ [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ], [ 463.1333333333333, 120.180503, 30.323697, 5, 2.019472122917776, 118, 196.86666666666667, 44.950000000000045 ] ], \"start\": 1 }' \u5f97\u5230\u7ed3\u679c [ 1, 0 ]","title":"\u52a8\u624b\u5199\u4e00\u4e2amodel \u548c handler"},{"location":"torchserve%E8%B8%A9%E5%9D%91/#tips","text":"\u6a21\u578b\u6587\u4ef6 model.py\u4ec5\u4ec5\u53ea\u80fd\u5305\u542b\u4e00\u4e2a\u7c7b\uff0c \u5982\u679c\u6211\u7684\u6a21\u578b\u5305\u62ecmodel_layers.py model.py \u5e76\u4e14model.py\u662f\u591a\u4e2a\u7c7b\u5982\u4f55\u89e3\u51b3\uff1f \u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u65b0\u6587\u4ef6model_submit.py\u4e2d \u628a\u6700\u7ec8\u7684\u6a21\u578b\u7c7b\u518d\u5c01\u88c5\u4e00\u5c42\uff0c\u5728\u6253\u5305\u65f6\u6307\u5b9a\u53c2\u6570extra-files bash torch-model-archiver --model-name pointer_net --model-file ../serve/examples/image_classifier/pointer_net/pointer_net.py \\ --handler ../serve/examples/image_classifier/pointer_net/pointer_net_handler.py \\ --extra-files ../serve/examples/image_classifier/pointer_net/pointer_net_layers.py \\ --runtime python3 --version shanghai \u540c\u7406\uff0c\u5982\u679c\u6a21\u578b\u5305\u62ec\u5176\u4ed6\u914d\u7f6e\u6587\u4ef6 \u6bd4\u5982 json yml \u7b49\u4e5f\u53ef\u4ee5\u901a\u8fc7extra-files\u6253\u5165mar\u5305 extra-files \u7684\u4f5c\u7528\u662f\u8ba9\u8be5\u6587\u4ef6\u4e00\u8d77\u6253\u5305\u8fdbmar\uff0c\u6a21\u578b\u53ef\u4ee5\u8bbf\u95ee \u5982\u4f55\u67e5\u770b\u65e5\u5fd7 debug \u4ee5docker\u65b9\u5f0f\u542f\u52a8\u7684serve \u53ef\u4ee5\u91c7\u7528 docker logs -f \u67e5\u770b\u65e5\u5fd7 \u5982\u679c\u6211\u9700\u8981\u66f4\u591a\u7684python\u5305\u600e\u4e48\u529e \u8fdb\u5165\u5bb9\u5668\u5b89\u88c5 \u4e3a\u4ec0\u4e48\u6211\u8bbf\u95ee\u63a5\u53e3400 500 \u547d\u4ee4\u5b58\u5728\u9519\u8bef \u6216\u8005\u6307\u5b9a\u7684\u5185\u5bb9\u975e\u6cd5\uff0c\u67e5\u770b\u65e5\u5fd7\u4e2d\u539f\u56e0 \u4e3a\u4ec0\u4e48\u6211\u8fdc\u7a0b\u52a0\u8f7d\u6a21\u578b\u5931\u8d25\uff0c\u663e\u793a\u672c\u5730\u5df2\u7ecf\u5b58\u5728\u4e00\u4e2a\u5305 \u5982\u679c\u672c\u5730\u5b58\u5728x.mar\u5219\u8fdc\u7a0b\u65e0\u6cd5\u52a0\u8f7d\u65b0\u7684\u540c\u540dmar\u5305\uff0c\u539f\u56e0\uff1aserve\u4f1a\u4e0b\u8f7dmar\u5305\u5230\u672c\u5730\u76ee\u5f55\uff0c\u7136\u540e\u8fd0\u884c\uff0c\u518d\u5378\u8f7d\u8be5\u6a21\u578b\u540e\u4f1a\u5220\u9664\u672c\u5730mar\u5305\uff0c\u56e0\u6b64\u5982\u679c\u4e0b\u8f7d\u663e\u793a\u672c\u5730\u5df2\u7ecf\u5b58\u5728\uff0c\u5219\u4e0d\u4f1a\u7ee7\u7eed\u540e\u7eed\u64cd\u4f5c \u63a5\u53e3\u4e00\u5b9a\u7528\u547d\u4ee4\u884c\u8bbf\u95ee\u5417\uff1f \u4e0d\u4e00\u5b9a\uff0c\u56e0\u4e3a\u662fhttp\u63a5\u53e3\uff0c\u6240\u4ee5\u4efb\u4f55\u901a\u8fc7http\u7684\u65b9\u5f0f\u90fd\u53ef\u4ee5\u8bbf\u95ee\uff0c\u6bd4\u5982postman\u3001\u7a0b\u5e8f\u4ee3\u7801 \u90fd\u53ef\u4ee5 \u5b98\u65b9\u6587\u6863\u5728\u54ea\u91cc\uff1f https://pytorch.org/serve/index.html \u5982\u4f55\u67e5\u770b\u63a5\u53e3\uff1f \u5982\u4f55\u901a\u8fc7grpc\u8bbf\u95ee\uff1f \u67e5\u770bpostrpc\u9879\u76ee\u793a\u4f8b","title":"tips"},{"location":"%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%A8%E8%AE%BA%E8%AE%B0%E5%BD%95%E4%B8%80/","text":"\u4ee3\u7801\u8ba8\u8bba\u95ee\u9898\u7684\u4f1a\u8bae\u8bb0\u5f55 \u6280\u672f\u67b6\u6784 \u540e\u7aef\u67b6\u6784\uff1ago, grpc, gin, gorm \u524d\u7aef\uff1avue.js \u548c \uff1f\uff1f\uff1f \uff08\u6ca1\u542c\u6e05\uff09\u7cfb\u7edf \u3001elementUI\u3001nodejs 0.0.0.0:xxxx \u548c 127.0.0.1:xxxx \u7684\u533a\u522b \u76f8\u540c\u70b9\uff1a\u90fd\u662f\u5728\u672c\u5730\u642d\u5efa\uff0c\u53ef\u4ee5\u6c38\u8fdc\u8bbf\u95ee\u5f53\u524d\u672c\u673a \u4e0d\u540c\u70b9\uff1a 127.0.0.1\uff1a\u662f\u7528localhost\u8bbf\u95ee\uff0c\u53ea\u80fd\u5728\u672c\u5730\u8bbf\u95ee 0.0.0.0\uff1a \u662f\u5e26\u56de\u8def\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c40\u57df\u7f51\u6765\u8bbf\u95ee\uff0c\u5982\u679c\u6709\u516c\u7f51IP\uff0c\u53ef\u4ee5\u901a\u8fc7\u516c\u7f51\u6765\u8bbf\u95ee\u3002 \u53cd\u5411\u4ee3\u7406\u8fc7\u7a0b\uff1a http://10.126.62.16:8080/api/model/manage/ping ===\u300b ip : 10.126.62.16 -> 10.126.62.16 port: 8080 -> 7675 /api/model/manage -> \u7a7a ===\u300bhttp://10.126.62.16:8080/ping \u524d\u7aef\u8c03\u8bd5 \u5b89\u88c5vue\u63d2\u4ef6 \u6559\u7a0b\uff1a \u524d\u63d0\u662f\u5b89\u88c5\u597dnodejs\u7684\u73af\u5883\u548ccnpm\u7684\u73af\u5883 https://blog.csdn.net/Sunshine__Girl/article/details/114709142 cnpm install \u7684\u4e0b\u8f7d\u8fc7\u7a0b\u8f83\u6162 vscode\u8c03\u8bd5\uff1a https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html \u4fee\u6539\u7f51\u7ad9\u9996\u9875\u7684icon import \u4e2d\u7684context \u7684\u542b\u4e49 context\u662f\u4e0a\u4e0b\u6587\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5b83\u5305\u542b\u8bf7\u6c42\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5b83\u5b58\u5728\u7684\u751f\u547d\u5468\u671f\u662f\u6bcf\u6b21\u8bf7\u6c42\u3002\u6bd4\u5982\u8bf4\u5c06\u4e00\u4e9b\u73af\u5883\u653e\u5165context\u53d8\u91cf\u4e2d\uff0c\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\uff0ccontext\u5219\u4f1a\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8c03\u7528\u8fc7\u7684\u53d8\u91cf\uff0c\u6bd4\u5982api\u7684\u53d8\u91cf\u4f1a\u4f20\u9012\u5230rpc\u53d8\u91cf\u4e2d\uff0c\u8fd9\u6837\u7a0b\u5e8f\u8fd0\u884c\u7684context\u4fe1\u606f\u4f1a\u4ece\u524d\u7aef\u5230\u540e\u7aef\uff0c\u5b83\u7684context\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\u3002 \u4e13\u95e8\u7528\u6765\u7b80\u5316 \u5bf9\u4e8e\u5904\u7406\u5355\u4e2a\u8bf7\u6c42\u7684\u591a\u4e2a goroutine \u4e4b\u95f4\u4e0e\u8bf7\u6c42\u57df\u7684\u6570\u636e\u3001\u53d6\u6d88\u4fe1\u53f7\u3001\u622a\u6b62\u65f6\u95f4\u7b49\u76f8\u5173\u64cd\u4f5c TODO 1 \uff1a\u53d1\u4e00\u4efd\u8bf4\u660e\u6846\u67b6\uff0c\u4ee5\u53ca\u6240\u6709\u7ec4\u4ef6\u7684\u6587\u6863\uff0c\u522b\u4eba\u5c01\u88c5\u8fc7\u7684\uff0c\u66f4\u4fbf\u6377\u4f7f\u7528 TODO 2 \uff1a\u53d1\u4e00\u4efd\u4ece\u524d\u7aef\u5230api\u5230rpc\u5230mq\u7684\u6574\u4e2a\u6d41\u7a0b\u7684demo TODO 3 \uff1a\u5c06IP\u6539\u6210\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\uff0c\u4ee5\u53ca\u5982\u4f55\u4fee\u6539IP\u3001\u5982\u4f55\u52a0\u8f7d\u7684\u6587\u6863 TODO 4\uff1a \u5982\u4f55\u5c06.mar\u6587\u4ef6\u90e8\u7f72\u5230\u670d\u52a1\u5668\u4e2d TODO 5\uff1a \u6700\u597d\u53ef\u4ee5\u5f55\u5236\u4e00\u4e2a\u8c03\u8bd5\u8fc7\u7a0b \u0b67(\ufe52\ufe20\u1d17\ufe52\ufe21)\u0b68","title":"\u4ee3\u7801\u95ee\u9898\u8ba8\u8bba\u8bb0\u5f55\u4e00"},{"location":"%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E8%AE%A8%E8%AE%BA%E8%AE%B0%E5%BD%95%E4%B8%80/#_1","text":"\u6280\u672f\u67b6\u6784 \u540e\u7aef\u67b6\u6784\uff1ago, grpc, gin, gorm \u524d\u7aef\uff1avue.js \u548c \uff1f\uff1f\uff1f \uff08\u6ca1\u542c\u6e05\uff09\u7cfb\u7edf \u3001elementUI\u3001nodejs 0.0.0.0:xxxx \u548c 127.0.0.1:xxxx \u7684\u533a\u522b \u76f8\u540c\u70b9\uff1a\u90fd\u662f\u5728\u672c\u5730\u642d\u5efa\uff0c\u53ef\u4ee5\u6c38\u8fdc\u8bbf\u95ee\u5f53\u524d\u672c\u673a \u4e0d\u540c\u70b9\uff1a 127.0.0.1\uff1a\u662f\u7528localhost\u8bbf\u95ee\uff0c\u53ea\u80fd\u5728\u672c\u5730\u8bbf\u95ee 0.0.0.0\uff1a \u662f\u5e26\u56de\u8def\u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u5c40\u57df\u7f51\u6765\u8bbf\u95ee\uff0c\u5982\u679c\u6709\u516c\u7f51IP\uff0c\u53ef\u4ee5\u901a\u8fc7\u516c\u7f51\u6765\u8bbf\u95ee\u3002 \u53cd\u5411\u4ee3\u7406\u8fc7\u7a0b\uff1a http://10.126.62.16:8080/api/model/manage/ping ===\u300b ip : 10.126.62.16 -> 10.126.62.16 port: 8080 -> 7675 /api/model/manage -> \u7a7a ===\u300bhttp://10.126.62.16:8080/ping \u524d\u7aef\u8c03\u8bd5 \u5b89\u88c5vue\u63d2\u4ef6 \u6559\u7a0b\uff1a \u524d\u63d0\u662f\u5b89\u88c5\u597dnodejs\u7684\u73af\u5883\u548ccnpm\u7684\u73af\u5883 https://blog.csdn.net/Sunshine__Girl/article/details/114709142 cnpm install \u7684\u4e0b\u8f7d\u8fc7\u7a0b\u8f83\u6162 vscode\u8c03\u8bd5\uff1a https://cn.vuejs.org/v2/cookbook/debugging-in-vscode.html \u4fee\u6539\u7f51\u7ad9\u9996\u9875\u7684icon import \u4e2d\u7684context \u7684\u542b\u4e49 context\u662f\u4e0a\u4e0b\u6587\u7684\u73af\u5883\u53d8\u91cf\uff0c\u5b83\u5305\u542b\u8bf7\u6c42\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5b83\u5b58\u5728\u7684\u751f\u547d\u5468\u671f\u662f\u6bcf\u6b21\u8bf7\u6c42\u3002\u6bd4\u5982\u8bf4\u5c06\u4e00\u4e9b\u73af\u5883\u653e\u5165context\u53d8\u91cf\u4e2d\uff0c\u5982\u679c\u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\uff0ccontext\u5219\u4f1a\u4f20\u9012\u7ed9\u4e0b\u4e00\u4e2a\u8c03\u7528\u8fc7\u7684\u53d8\u91cf\uff0c\u6bd4\u5982api\u7684\u53d8\u91cf\u4f1a\u4f20\u9012\u5230rpc\u53d8\u91cf\u4e2d\uff0c\u8fd9\u6837\u7a0b\u5e8f\u8fd0\u884c\u7684context\u4fe1\u606f\u4f1a\u4ece\u524d\u7aef\u5230\u540e\u7aef\uff0c\u5b83\u7684context\u4fe1\u606f\u4f1a\u88ab\u8bb0\u5f55\u4e0b\u6765\u3002 \u4e13\u95e8\u7528\u6765\u7b80\u5316 \u5bf9\u4e8e\u5904\u7406\u5355\u4e2a\u8bf7\u6c42\u7684\u591a\u4e2a goroutine \u4e4b\u95f4\u4e0e\u8bf7\u6c42\u57df\u7684\u6570\u636e\u3001\u53d6\u6d88\u4fe1\u53f7\u3001\u622a\u6b62\u65f6\u95f4\u7b49\u76f8\u5173\u64cd\u4f5c TODO 1 \uff1a\u53d1\u4e00\u4efd\u8bf4\u660e\u6846\u67b6\uff0c\u4ee5\u53ca\u6240\u6709\u7ec4\u4ef6\u7684\u6587\u6863\uff0c\u522b\u4eba\u5c01\u88c5\u8fc7\u7684\uff0c\u66f4\u4fbf\u6377\u4f7f\u7528 TODO 2 \uff1a\u53d1\u4e00\u4efd\u4ece\u524d\u7aef\u5230api\u5230rpc\u5230mq\u7684\u6574\u4e2a\u6d41\u7a0b\u7684demo TODO 3 \uff1a\u5c06IP\u6539\u6210\u4ece\u914d\u7f6e\u6587\u4ef6\u4e2d\u8bfb\u53d6\uff0c\u4ee5\u53ca\u5982\u4f55\u4fee\u6539IP\u3001\u5982\u4f55\u52a0\u8f7d\u7684\u6587\u6863 TODO 4\uff1a \u5982\u4f55\u5c06.mar\u6587\u4ef6\u90e8\u7f72\u5230\u670d\u52a1\u5668\u4e2d TODO 5\uff1a \u6700\u597d\u53ef\u4ee5\u5f55\u5236\u4e00\u4e2a\u8c03\u8bd5\u8fc7\u7a0b \u0b67(\ufe52\ufe20\u1d17\ufe52\ufe21)\u0b68","title":"\u4ee3\u7801\u8ba8\u8bba\u95ee\u9898\u7684\u4f1a\u8bae\u8bb0\u5f55"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/","text":"post\u670d\u52a1\u6dfb\u52a0\u63a5\u53e3 \u6211\u4eec\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u6ce8\u518c\u6a21\u578b\u7684\u63a5\u53e3\u8fdb\u884c\u6f14\u793a \u91c7\u7528 torchserve -> post_model_manage(rpc) -> postapi(http) -> postweb(web)\u7684\u987a\u5e8f 1. \u6d4b\u8bd5torchserve grpc\u63a5\u53e3 \u7528bloomRPC\u8fdb\u884c\u52a0\u8f7dtorchserve\u7684proto\u6587\u4ef6,\u5c1d\u8bd5\u6ce8\u518c\u6a21\u578b \u53ef\u4ee5\u901a\u8fc7\u6211\u4eec\u542f\u52a8docker\u7684\u547d\u4ee4\u67e5\u770b\u5230torchserve\u7684\u8fd0\u884c\u7aef\u53e3\uff0c\u547d\u4ee4\u5982\u4e0b sudo docker run -d --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models pytorch/torchserve:0.5.0-cpu torchserve --start --model-store /tmp/models/ --no-config-snapshots \u7ed3\u5408torchserve\u7684\u5b98\u65b9\u6587\u6863https://pytorch.org/serve/grpc_api.html\uff0ctorchserve\u4e2d7071\u662f\u6a21\u578b\u7ba1\u7406\u7684grpc\u63a5\u53e3 \u200b \u56e0\u6b64\u6211\u4eec\u627e\u5230Register\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u5c1d\u8bd5\u6ce8\u518c\u4e00\u4e2a\u6a21\u578b, \u9009\u62e9\u672c\u5730\uff0c\u901a\u8fc7\u542f\u52a8\u547d\u4ee4\u6211\u4eec\u77e5\u9053,\u6a21\u578b\u76ee\u5f55\u662f\u5728/data/MengQingqiang/rpc/model_store\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u4e00\u4e2a\u6a21\u578b\u653e\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u5c1d\u8bd5\u901a\u8fc7grpc\u65b9\u5f0f\u6ce8\u518c\u3002 \u6700\u65b9\u4fbf\u7684\u65b9\u5f0f\u662f\u6211\u4eec\u5378\u8f7d\u4e00\u4e2a\u672c\u5730\u52a0\u8f7d\u7684\u6a21\u578b\uff0c\u542f\u52a8\u524d\u7aef\u8fdb\u884c\u5378\u8f7d(\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c)\uff0c \u53ef\u4ee5\u770b\u5230\u672c\u5730\u76ee\u5f55\u5b58\u5728\u8fd9\u4e2amar\u5305\uff0c\u73b0\u5728\u6211\u4eec\u8fdb\u884c\u6ce8\u518c ok,\u73b0\u5728\u5df2\u7ecf\u6210\u529f\u8bf4\u660e\u63a5\u53e3\u4e0d\u5b58\u5728\u95ee\u9898\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u5f00\u53d1\u6765\u5b9e\u73b0\u8fd9\u4e2a\u90e8\u5206\u3002 2. \u5728postrpc\u4e2d\u7684post_model_manage\u6dfb\u52a0\u4e00\u4e2a\u6ce8\u518c\u6a21\u578b\u7684rpc\u63a5\u53e3 2.1 \u9996\u5148clone\u4e0bpostrpc\u670d\u52a1 git clone https://github.com/SpringTY/postrpc.git \u6211\u672c\u5730\u4e4b\u524d\u6709\u8fd9\u4e2amodel,\u6240\u4ee5\u4e0d\u9700\u8981\u8fd9\u4e2a\u6b65\u9aa4 2.2 \u66f4\u6539idl\u6587\u4ef6 \u9996\u5148\uff0c\u6211\u4eec\u6253\u5f00postrpc\u6587\u4ef6\u5939\uff0c\u53d1\u73b0\u5176\u4e2d\u5b58\u5728idl/post_model_manage.proto\u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u65b0\u52a0\u4e00\u4e2a\u63a5\u53e3RegisterModel // add Request Struct message RegisterModelRequest{ string url = 1; } // add Response Struct message RegisterModelResponse{ string message = 1; int32 status = 2; } service PostModelManage{ rpc GetModels (GetModelsRequest) returns (GetModelsResponse) {} rpc RemoveModel (RemoveModelRequest) returns (RemoveModelResponse) {} rpc UpdateModelConfig (UpdateModelConfigRequest) returns (UpdateModelConfigResponse) {} rpc GetModelStates(GetModelStatesRequest) returns (GetModelStatesResponse) {} rpc RegisterModel(RegisterModelRequest) returns (RegisterModelResponse){} // \u8fd9\u91cc\u662f\u65b0\u52a0\u7684 } 2.3 \u91cd\u65b0\u751f\u6210\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u4ee3\u7801 \u6211\u4eec\u91c7\u7528sh/post_data_manage.sh\u7684\u811a\u672c\u751f\u6210\u4ee3\u7801,\u8fd9\u4e2a\u811a\u672c\u662f\u6211\u81ea\u5df1\u5199\u7684\uff0c\u56e0\u6b64\u5982\u679c\u65b0\u5efarpc\u670d\u52a1\u53ef\u4ee5\u4eff\u7167\u8fd9\u4e2a\u811a\u672c\u5199\u751f\u6210\u4ee3\u7801\u903b\u8f91 sh/post_data_manage.sh \u8fd0\u884c\u547d\u4ee4\u540e\uff0c\u4f7f\u7528git status\u53d1\u73b0\u5b58\u5728\u4e24\u90e8\u5206\u7684\u4ee3\u7801\u53d1\u751f\u6539\u53d8 \u4e00\u90e8\u5206\u4e3arpc_sdk(\u5ba2\u6237\u7aef)\u53e6\u4e00\u90e8\u5206\u4e3a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684post_model_manage(\u670d\u52a1\u7aef) (base) pi@ubuntu:/mnt/hgfs/share_vm/postrpc$ sh/post_model_manage.sh IDL:sh/../idl/post_model_manage.proto (base) pi@ubuntu:/mnt/hgfs/share_vm/postrpc$ git status \u4f4d\u4e8e\u5206\u652f feature_manage_2 \u5c1a\u672a\u6682\u5b58\u4ee5\u5907\u63d0\u4ea4\u7684\u53d8\u66f4\uff1a \uff08\u4f7f\u7528 \"git add <\u6587\u4ef6>...\" \u66f4\u65b0\u8981\u63d0\u4ea4\u7684\u5185\u5bb9\uff09 \uff08\u4f7f\u7528 \"git restore <\u6587\u4ef6>...\" \u4e22\u5f03\u5de5\u4f5c\u533a\u7684\u6539\u52a8\uff09 \u4fee\u6539\uff1a post_model_manage/idl/post_model_manage/post_model_manage.pb.go \u4fee\u6539\uff1a post_model_manage/idl/post_model_manage/post_model_manage_grpc.pb.go \u4fee\u6539\uff1a rpc_sdk/post_model_manage/post_model_manage.pb.go \u4fee\u6539\uff1a rpc_sdk/post_model_manage/post_model_manage_grpc.pb.go \u4fee\u6539\u5c1a\u672a\u52a0\u5165\u63d0\u4ea4\uff08\u4f7f\u7528 \"git add\" \u548c/\u6216 \"git commit -a\"\uff09 \u6bcf\u6b21\u6211\u4eec\u65b0\u6dfb\u52a0rpc\u7684\u63a5\u53e3\u7684\u65f6\u5019\u9700\u8981\u91cd\u65b0\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u5efa\u8bae\u786e\u8ba4\u5de5\u4f5c\u533a\u65e0\u53d8\u52a8\u65f6\u6267\u884c 2.4 \u5b9e\u73b0\u670d\u52a1\u4e2d\u7684\u63a5\u53e3 \u63a5\u53e3\u5b9e\u73b0 \u6253\u5f00postrpc\u76ee\u5f55\u4e0b\u7684post_model_manage\u6587\u4ef6\u5939\uff0c\u5728hander.go\u4e2d\uff0c\u6211\u4eec\u8ba9Server\u7ed3\u6784\u4f53\u5b9e\u73b0idl/post_data_manage\u5305\u4e0b\u7684PostModelManageServer\u63a5\u53e3 \u8fd9\u91cc\u6709\u70b9\u4e0d\u592a\u786e\u5b9a PostModelManageServer \u548cUnsafePostModelManageServer\u7684\u533a\u522b\uff0c\u53ef\u4ee5\u53bb\u770b\u4ee3\u7801\u6216\u8005\u7814\u7a76grpc\u52a0\u8f7d\u670d\u52a1\u7684\u903b\u8f91\uff0cok, \u73b0\u5728\u786e\u5b9a\u4e50\u662f\u9700\u8981\u5b9e\u73b0post_model_manage/idl/post_model_manage.PostModelManageServer\u63a5\u53e3 \u53ef\u4ee5\u770b\u5230IDE\u9009\u62e9\u5b9e\u73b0\u63a5\u53e3\u65f6\u751f\u6210\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5bf9\u5e94\u6211\u4eec\u521a\u624d\u5728IDL\u4e2d\u58f0\u660e\u7684\u63a5\u53e3 \u73b0\u5728\u6211\u4eec\u8981\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u65f6\u629b\u4e00\u4e2a\u5f02\u5e38 \u5728handler\u5305\u4e0b\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u53eb\u505aregister_model.go package handler import ( \"context\" \"post_model_manage/idl/post_model_manage\" ) type RegisterModelHandler struct { Request *post_model_manage.RegisterModelRequest Response *post_model_manage.RegisterModelResponse Ctx context.Context } func NewRegisterModelHandler(Ctx context.Context, Request *post_model_manage.RegisterModelRequest) *RegisterModelHandler { return &RegisterModelHandler{ Request: Request, Ctx: Ctx, Response: &post_model_manage.RegisterModelResponse{ Message: \"success\", Status: 0, }, } } func (h *RegisterModelHandler) Run() { } func (h *RegisterModelHandler) CheckParam() error { return nil } \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u4ee3\u7801\u5305\u542b\u4e00\u4e2aRegisterModelHandler\uff0c\u4e0e\u540c\u5305\u4e0b\u5176\u4ed6\u6587\u4ef6\u7c7b\u4f3c\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u4e00\u4e2ahttp\u670d\u52a1\u7684\u4e00\u4e2aController\uff0cRegisterModelHandler\u5176\u4e2d\u5b58\u5728\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4e00\u4e2a\u662fRun\u53e6\u4e00\u4e2a\u662fCheckParam Run\u65b9\u6cd5 \u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u5b9e\u73b0\u4ee3\u7801 CheckParm \u8f93\u5165\u53c2\u6570\u68c0\u67e5\u4ee3\u7801 Register Model Handler\u7684\u4e1a\u52a1\u903b\u8f91 \u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f1.\u8bfb\u53d6\u8f93\u5165\u7684url 2.\u8c03\u7528torchserve\u7684grpc\u63a5\u53e3\u8fdb\u884c\u6ce8\u518c\u6a21\u578b 3. \u8fd4\u56de\u54cd\u5e94 \u8c03\u7528torchserve grpc\u90e8\u5206 \u56e0\u4e3a\u6a21\u578b\u7ba1\u7406\u6a21\u5757\u5df2\u7ecf\u5199\u8fc7torchserve grpc\u903b\u8f91\uff0c\u6211\u4eec\u6253\u5f00post_model_manage/rpc\u6587\u4ef6\u5939\u4e0b\u7684management.go\u8fdb\u884c\u6dfb\u52a0\u6ce8\u518c\u6a21\u578b\u903b\u8f91 func RegisterModel(ctx context.Context, url, modelName string) (string, error) { req := &pb.RegisterModelRequest{ InitialWorkers: 1, ModelName: modelName, Synchronous: false, //\u662f\u5426\u662f\u540c\u6b65\u52a0\u8f7d,\u6211\u4eec\u9009\u62e9\u5f02\u6b65\u52a0\u8f7d Url: url, } resp, err := management_client.RegisterModel(ctx, req) if err != nil { log.Printf(\"[Error] Error call rpc RegisterModel, err: %v\", err) return err.Error(), err } return resp.Msg, nil } RegisterModelHandler CheckParam\u903b\u8f91 \u8fd9\u91cc\u505a\u53c2\u6570\u6821\u9a8c, \u53ef\u4ee5\u5141\u8bb8\u4e24\u79cd\u7c7b\u578b\u53c2\u6570http://xxx/xxx/xxx.mar \u7f51\u7edc\u4f4d\u7f6e \u548cxxx.mar \u672c\u5730\u4f4d\u7f6e \u53ef\u4ee5\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u505a, \u9009\u62e9\u7528\u6b63\u5219 const httpMarReg = \"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|].mar\" const localMarReg = \".*.mar\" var HttpMarRegexp *regexp.Regexp var LocalMarRegexp *regexp.Regexp func Init() { HttpMarRegexp = regexp.MustCompile(httpMarReg) LocalMarRegexp = regexp.MustCompile(localMarReg) } RegisterModelHandler Run \u903b\u8f91 \u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6modelName \u4e00\u79cdgrpc\u7684\u8bf7\u6c42\u4f20\u53c2\uff0c\u53e6\u4e00\u79cd\u7ea6\u5b9a\u4ee5mar\u5305\u7684\u5305\u540d\uff0c\u6211\u4eec\u73b0\u5728\u505a\u4ee5\u5305\u540d\u7684\u65b9\u5f0f\u547d\u540d\u6a21\u578b\u540d package handler import ( \"context\" \"fmt\" \"log\" \"post_model_manage/consts\" \"post_model_manage/idl/post_model_manage\" \"post_model_manage/rpc\" \"strings\" ) type RegisterModelHandler struct { Request *post_model_manage.RegisterModelRequest Response *post_model_manage.RegisterModelResponse Ctx context.Context } func NewRegisterModelHandler(Ctx context.Context, Request *post_model_manage.RegisterModelRequest) *RegisterModelHandler { return &RegisterModelHandler{ Request: Request, Ctx: Ctx, Response: &post_model_manage.RegisterModelResponse{ Message: \"success\", Status: 0, }, } } func (h *RegisterModelHandler) Run() { err := h.CheckParam() if err != nil { h.Response.Status = 1 h.Response.Message = err.Error() return } modelUrl := h.Request.Url modelName := h.getModelName() toast, err := rpc.RegisterModel(h.Ctx, modelUrl, modelName) if err != nil { h.Response.Status = 1 h.Response.Message = err.Error() return } h.Response.Message = toast } func (h *RegisterModelHandler) getModelName() string { modelUrl := h.Request.Url modelName := \"\" marName := \"\" if consts.HttpMarRegexp.Match([]byte(modelUrl)) { httpPath := strings.Split(modelUrl, \"\\\\\") marName = httpPath[len(httpPath)-1] } else { marName = modelUrl } // \".mar\" modelName = marName[:len(marName)-4] return modelName } func (h *RegisterModelHandler) CheckParam() error { modelUrl := h.Request.Url if consts.HttpMarRegexp.Match([]byte(modelUrl)) { return nil } if consts.LocalMarRegexp.Match([]byte(modelUrl)) { return nil } return fmt.Errorf(\"modelUrl is valid:%s\", modelUrl) } \u5728handler.go\u4e2d\u5b9e\u73b0\u903b\u8f91 func (s *Server) RegisterModel(ctx context.Context, request *post_model_manage.RegisterModelRequest) (*post_model_manage.RegisterModelResponse, error) { Handler := handler.NewRegisterModelHandler(ctx, request) Handler.Run() return Handler.Response, nil } \u6d4b\u8bd5 sh build.sh out/post_model_manage \u5206\u522b\u6d4b\u8bd5\u672c\u5730\u548c\u7f51\u7edc\u4f4d\u7f6e \u7531\u6b64grpc\u7684\u90e8\u5206\u5df2\u7ecf\u505a\u597d API\u90e8\u5206 \u9996\u5148\u6211\u4eecgit clone\u4e0bapi\u4ee3\u7801 \u5b9a\u4e49\u63a5\u53e3 \u6211\u4eec\u5b9a\u4e49\u6ce8\u518c\u6a21\u578b\u8bf7\u6c42\u4e3apost\u8bf7\u6c42\u4e14 path\u5982\u4e0b /model/register model_url\u662fbody\u7684\u4e00\u4e2a\u5c5e\u6027 \u5728main.go\u4e2d\u6dfb\u52a0\u4e00\u4e2a r.POST(\"/model/register\", handler.RegisterModelHandler) \u7136\u540e\u5728handler\u91cc\u9762\u6dfb\u52a0\u4e00\u4e2a\u6587\u4ef6register_model_handler.go \u5728\u8be5\u6587\u4ef6\u4e2d\u6dfb\u52a0\u65b9\u6cd5RegisterModelHandler\uff0c \u4e8b\u5b9e\u4e0a\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\u4f53RegisterModelHandler\uff0c\u5e76\u66ff\u6362main.go\u4e2d\u7684\u51fd\u6570\u4e3ahandler wrapperRegisterModel, \u5728wrapperRegisterModelHandler \u8fdb\u884c\u53c2\u6570\u9a8c\u8bc1\uff0c\u5e76\u4e14\u751f\u6210\u4e00\u4e2aRegisterModelHandler\u6267\u884cRegisterModelHandler.RUN \u8fd9\u66f4\u52a0\u89c4\u8303\uff0c\u4f46\u662f\u6211\u61d2\u5f97\u8fd9\u4e2a\u641e\u4e86 package handler import ( \"net/http\" view_model \"postapi/model/view\" \"github.com/gin-gonic/gin\" ) type RegisterModelBody struct { ModelUrl string `json:\"model_url\"` } func RegisterModelHandler(c *gin.Context) { body := RegisterModelBody{} err := c.BindJSON(&body) if err != nil { c.JSON(http.StatusBadRequest, nil) return } toast, err := RegisterModel(c, &body) if err != nil { c.JSON(http.StatusInternalServerError, nil) return } resp := &view_model.CommonResult{ Message: toast, Status: 0, } c.JSON(http.StatusOK, resp) } func RegisterModel(ctx *gin.Context, body *RegisterModelBody) (string, error) { //\u8c03\u7528post_model_manage \u903b\u8f91 } \u8c03\u7528post_model_manage \u9996\u5148\uff0c\u6211\u4eec\u66f4\u65b0rpc\u4f9d\u8d56 go get github.com/SpringTY/postrpc \u7136\u540e\u5728rpc/model_manage.go\u4e2d\u6dfb\u52a0RegisterModel\u65b9\u6cd5 func RegisterModel(ctx context.Context, modelUrl string) (string, error) { req := &post_model_manage.RegisterModelRequest{ Url: modelUrl, } resp, err := model_manage_client.RegisterModel(ctx, req) if err != nil { return \"\", err } else if resp.Status != 0 { return \"\", errors.New(resp.Message) } return resp.Message, nil } register_model.go\u4e2d\u903b\u8f91 func RegisterModel(ctx *gin.Context, body *RegisterModelBody) (string, error) { //\u8c03\u7528post_model_manage \u903b\u8f91 toast, err := rpc.RegisterModel(ctx, body.ModelUrl) if err != nil { return \"\", err } return toast, nil } \u6211\u7a0d\u7a0d\u6539\u52a8\u4e86\u4e00\u4e9bregister_model.go\u7684RegisterModelHandler\u903b\u8f91 \u89c1\u4ee3\u7801 \u6d4b\u8bd5 \u9996\u5148\u542f\u52a8rpc\u670d\u52a1 \u66f4\u6539\u6211\u4eec\u8c03\u7528rpc\u670d\u52a1\u7684\u5730\u5740\u4e3a\u672c\u5730\u8fdb\u884c\u6d4b\u8bd5 \u5730\u5740\u4e3arpc/model_manage.go \u7684model_manage_address\u53d8\u91cf go run main,go import http.client import json conn = http.client.HTTPSConnection(\"vm\", 7675) payload = json.dumps({ \"model_url\": \"greedy_time.mar\" }) headers = { 'Content-Type': 'application/json' } conn.request(\"POST\", \"/model/register\", payload, headers) res = conn.getresponse() data = res.read() print(data.decode(\"utf-8\")) \u6d4b\u8bd5\u63a5\u53e3 bugs \u521a\u624d\u53d1\u73b0\u5982\u679c\u52a0\u8f7d\u7f51\u7edc\u4f4d\u7f6e\u6a21\u578b\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u6253\u5f00\u5217\u8868\uff0c\u5e76\u4e14\u6a21\u578b\u7684url\u4e0d\u6b63\u786e\uff0c\u73b0\u5728fix\u4e00\u4e0b","title":"\u5982\u4f55\u6dfb\u52a0\u63a5\u53e3"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#1-torchserve-grpc","text":"\u7528bloomRPC\u8fdb\u884c\u52a0\u8f7dtorchserve\u7684proto\u6587\u4ef6,\u5c1d\u8bd5\u6ce8\u518c\u6a21\u578b \u53ef\u4ee5\u901a\u8fc7\u6211\u4eec\u542f\u52a8docker\u7684\u547d\u4ee4\u67e5\u770b\u5230torchserve\u7684\u8fd0\u884c\u7aef\u53e3\uff0c\u547d\u4ee4\u5982\u4e0b sudo docker run -d --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models pytorch/torchserve:0.5.0-cpu torchserve --start --model-store /tmp/models/ --no-config-snapshots \u7ed3\u5408torchserve\u7684\u5b98\u65b9\u6587\u6863https://pytorch.org/serve/grpc_api.html\uff0ctorchserve\u4e2d7071\u662f\u6a21\u578b\u7ba1\u7406\u7684grpc\u63a5\u53e3 \u200b \u56e0\u6b64\u6211\u4eec\u627e\u5230Register\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u5c1d\u8bd5\u6ce8\u518c\u4e00\u4e2a\u6a21\u578b, \u9009\u62e9\u672c\u5730\uff0c\u901a\u8fc7\u542f\u52a8\u547d\u4ee4\u6211\u4eec\u77e5\u9053,\u6a21\u578b\u76ee\u5f55\u662f\u5728/data/MengQingqiang/rpc/model_store\uff0c\u56e0\u6b64\u6211\u4eec\u628a\u4e00\u4e2a\u6a21\u578b\u653e\u5230\u8fd9\u4e2a\u76ee\u5f55\u4e0b\u5c1d\u8bd5\u901a\u8fc7grpc\u65b9\u5f0f\u6ce8\u518c\u3002 \u6700\u65b9\u4fbf\u7684\u65b9\u5f0f\u662f\u6211\u4eec\u5378\u8f7d\u4e00\u4e2a\u672c\u5730\u52a0\u8f7d\u7684\u6a21\u578b\uff0c\u542f\u52a8\u524d\u7aef\u8fdb\u884c\u5378\u8f7d(\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c)\uff0c \u53ef\u4ee5\u770b\u5230\u672c\u5730\u76ee\u5f55\u5b58\u5728\u8fd9\u4e2amar\u5305\uff0c\u73b0\u5728\u6211\u4eec\u8fdb\u884c\u6ce8\u518c ok,\u73b0\u5728\u5df2\u7ecf\u6210\u529f\u8bf4\u660e\u63a5\u53e3\u4e0d\u5b58\u5728\u95ee\u9898\uff0c\u73b0\u5728\u6211\u4eec\u9700\u8981\u5f00\u53d1\u6765\u5b9e\u73b0\u8fd9\u4e2a\u90e8\u5206\u3002","title":"1. \u6d4b\u8bd5torchserve grpc\u63a5\u53e3"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#2-postrpcpost_model_managerpc","text":"","title":"2. \u5728postrpc\u4e2d\u7684post_model_manage\u6dfb\u52a0\u4e00\u4e2a\u6ce8\u518c\u6a21\u578b\u7684rpc\u63a5\u53e3"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#21-clonepostrpc","text":"git clone https://github.com/SpringTY/postrpc.git \u6211\u672c\u5730\u4e4b\u524d\u6709\u8fd9\u4e2amodel,\u6240\u4ee5\u4e0d\u9700\u8981\u8fd9\u4e2a\u6b65\u9aa4","title":"2.1 \u9996\u5148clone\u4e0bpostrpc\u670d\u52a1"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#22-idl","text":"\u9996\u5148\uff0c\u6211\u4eec\u6253\u5f00postrpc\u6587\u4ef6\u5939\uff0c\u53d1\u73b0\u5176\u4e2d\u5b58\u5728idl/post_model_manage.proto\u6587\u4ef6\uff0c\u5728\u5176\u4e2d\u65b0\u52a0\u4e00\u4e2a\u63a5\u53e3RegisterModel // add Request Struct message RegisterModelRequest{ string url = 1; } // add Response Struct message RegisterModelResponse{ string message = 1; int32 status = 2; } service PostModelManage{ rpc GetModels (GetModelsRequest) returns (GetModelsResponse) {} rpc RemoveModel (RemoveModelRequest) returns (RemoveModelResponse) {} rpc UpdateModelConfig (UpdateModelConfigRequest) returns (UpdateModelConfigResponse) {} rpc GetModelStates(GetModelStatesRequest) returns (GetModelStatesResponse) {} rpc RegisterModel(RegisterModelRequest) returns (RegisterModelResponse){} // \u8fd9\u91cc\u662f\u65b0\u52a0\u7684 }","title":"2.2 \u66f4\u6539idl\u6587\u4ef6"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#23","text":"\u6211\u4eec\u91c7\u7528sh/post_data_manage.sh\u7684\u811a\u672c\u751f\u6210\u4ee3\u7801,\u8fd9\u4e2a\u811a\u672c\u662f\u6211\u81ea\u5df1\u5199\u7684\uff0c\u56e0\u6b64\u5982\u679c\u65b0\u5efarpc\u670d\u52a1\u53ef\u4ee5\u4eff\u7167\u8fd9\u4e2a\u811a\u672c\u5199\u751f\u6210\u4ee3\u7801\u903b\u8f91 sh/post_data_manage.sh \u8fd0\u884c\u547d\u4ee4\u540e\uff0c\u4f7f\u7528git status\u53d1\u73b0\u5b58\u5728\u4e24\u90e8\u5206\u7684\u4ee3\u7801\u53d1\u751f\u6539\u53d8 \u4e00\u90e8\u5206\u4e3arpc_sdk(\u5ba2\u6237\u7aef)\u53e6\u4e00\u90e8\u5206\u4e3a\u5f53\u524d\u76ee\u5f55\u4e0b\u7684post_model_manage(\u670d\u52a1\u7aef) (base) pi@ubuntu:/mnt/hgfs/share_vm/postrpc$ sh/post_model_manage.sh IDL:sh/../idl/post_model_manage.proto (base) pi@ubuntu:/mnt/hgfs/share_vm/postrpc$ git status \u4f4d\u4e8e\u5206\u652f feature_manage_2 \u5c1a\u672a\u6682\u5b58\u4ee5\u5907\u63d0\u4ea4\u7684\u53d8\u66f4\uff1a \uff08\u4f7f\u7528 \"git add <\u6587\u4ef6>...\" \u66f4\u65b0\u8981\u63d0\u4ea4\u7684\u5185\u5bb9\uff09 \uff08\u4f7f\u7528 \"git restore <\u6587\u4ef6>...\" \u4e22\u5f03\u5de5\u4f5c\u533a\u7684\u6539\u52a8\uff09 \u4fee\u6539\uff1a post_model_manage/idl/post_model_manage/post_model_manage.pb.go \u4fee\u6539\uff1a post_model_manage/idl/post_model_manage/post_model_manage_grpc.pb.go \u4fee\u6539\uff1a rpc_sdk/post_model_manage/post_model_manage.pb.go \u4fee\u6539\uff1a rpc_sdk/post_model_manage/post_model_manage_grpc.pb.go \u4fee\u6539\u5c1a\u672a\u52a0\u5165\u63d0\u4ea4\uff08\u4f7f\u7528 \"git add\" \u548c/\u6216 \"git commit -a\"\uff09 \u6bcf\u6b21\u6211\u4eec\u65b0\u6dfb\u52a0rpc\u7684\u63a5\u53e3\u7684\u65f6\u5019\u9700\u8981\u91cd\u65b0\u6267\u884c\u8fd9\u4e2a\u811a\u672c\uff0c\u5efa\u8bae\u786e\u8ba4\u5de5\u4f5c\u533a\u65e0\u53d8\u52a8\u65f6\u6267\u884c","title":"2.3 \u91cd\u65b0\u751f\u6210\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u4ee3\u7801"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#24","text":"","title":"2.4 \u5b9e\u73b0\u670d\u52a1\u4e2d\u7684\u63a5\u53e3"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#_1","text":"\u6253\u5f00postrpc\u76ee\u5f55\u4e0b\u7684post_model_manage\u6587\u4ef6\u5939\uff0c\u5728hander.go\u4e2d\uff0c\u6211\u4eec\u8ba9Server\u7ed3\u6784\u4f53\u5b9e\u73b0idl/post_data_manage\u5305\u4e0b\u7684PostModelManageServer\u63a5\u53e3 \u8fd9\u91cc\u6709\u70b9\u4e0d\u592a\u786e\u5b9a PostModelManageServer \u548cUnsafePostModelManageServer\u7684\u533a\u522b\uff0c\u53ef\u4ee5\u53bb\u770b\u4ee3\u7801\u6216\u8005\u7814\u7a76grpc\u52a0\u8f7d\u670d\u52a1\u7684\u903b\u8f91\uff0cok, \u73b0\u5728\u786e\u5b9a\u4e50\u662f\u9700\u8981\u5b9e\u73b0post_model_manage/idl/post_model_manage.PostModelManageServer\u63a5\u53e3 \u53ef\u4ee5\u770b\u5230IDE\u9009\u62e9\u5b9e\u73b0\u63a5\u53e3\u65f6\u751f\u6210\u4e86\u4e00\u4e2a\u65b9\u6cd5\uff0c\u5bf9\u5e94\u6211\u4eec\u521a\u624d\u5728IDL\u4e2d\u58f0\u660e\u7684\u63a5\u53e3 \u73b0\u5728\u6211\u4eec\u8981\u5b9e\u73b0\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u56e0\u4e3a\u9ed8\u8ba4\u65f6\u629b\u4e00\u4e2a\u5f02\u5e38 \u5728handler\u5305\u4e0b\u65b0\u5efa\u4e00\u4e2a\u6587\u4ef6\u53eb\u505aregister_model.go package handler import ( \"context\" \"post_model_manage/idl/post_model_manage\" ) type RegisterModelHandler struct { Request *post_model_manage.RegisterModelRequest Response *post_model_manage.RegisterModelResponse Ctx context.Context } func NewRegisterModelHandler(Ctx context.Context, Request *post_model_manage.RegisterModelRequest) *RegisterModelHandler { return &RegisterModelHandler{ Request: Request, Ctx: Ctx, Response: &post_model_manage.RegisterModelResponse{ Message: \"success\", Status: 0, }, } } func (h *RegisterModelHandler) Run() { } func (h *RegisterModelHandler) CheckParam() error { return nil } \u53ef\u4ee5\u770b\u5230\uff0c\u6211\u4eec\u4ee3\u7801\u5305\u542b\u4e00\u4e2aRegisterModelHandler\uff0c\u4e0e\u540c\u5305\u4e0b\u5176\u4ed6\u6587\u4ef6\u7c7b\u4f3c\uff0c\u8fd9\u7c7b\u4f3c\u4e8e\u4e00\u4e2ahttp\u670d\u52a1\u7684\u4e00\u4e2aController\uff0cRegisterModelHandler\u5176\u4e2d\u5b58\u5728\u4e24\u4e2a\u65b9\u6cd5\uff0c\u4e00\u4e2a\u662fRun\u53e6\u4e00\u4e2a\u662fCheckParam","title":"\u63a5\u53e3\u5b9e\u73b0"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#run","text":"\u5177\u4f53\u7684\u4e1a\u52a1\u903b\u8f91\u5b9e\u73b0\u4ee3\u7801","title":"Run\u65b9\u6cd5"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#checkparm","text":"\u8f93\u5165\u53c2\u6570\u68c0\u67e5\u4ee3\u7801","title":"CheckParm"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#register-model-handler","text":"\u6211\u4eec\u7684\u4e1a\u52a1\u903b\u8f91\u4e5f\u5f88\u7b80\u5355\uff0c\u5c31\u662f1.\u8bfb\u53d6\u8f93\u5165\u7684url 2.\u8c03\u7528torchserve\u7684grpc\u63a5\u53e3\u8fdb\u884c\u6ce8\u518c\u6a21\u578b 3. \u8fd4\u56de\u54cd\u5e94","title":"Register Model Handler\u7684\u4e1a\u52a1\u903b\u8f91"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#torchserve-grpc","text":"\u56e0\u4e3a\u6a21\u578b\u7ba1\u7406\u6a21\u5757\u5df2\u7ecf\u5199\u8fc7torchserve grpc\u903b\u8f91\uff0c\u6211\u4eec\u6253\u5f00post_model_manage/rpc\u6587\u4ef6\u5939\u4e0b\u7684management.go\u8fdb\u884c\u6dfb\u52a0\u6ce8\u518c\u6a21\u578b\u903b\u8f91 func RegisterModel(ctx context.Context, url, modelName string) (string, error) { req := &pb.RegisterModelRequest{ InitialWorkers: 1, ModelName: modelName, Synchronous: false, //\u662f\u5426\u662f\u540c\u6b65\u52a0\u8f7d,\u6211\u4eec\u9009\u62e9\u5f02\u6b65\u52a0\u8f7d Url: url, } resp, err := management_client.RegisterModel(ctx, req) if err != nil { log.Printf(\"[Error] Error call rpc RegisterModel, err: %v\", err) return err.Error(), err } return resp.Msg, nil }","title":"\u8c03\u7528torchserve grpc\u90e8\u5206"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#registermodelhandler-checkparam","text":"\u8fd9\u91cc\u505a\u53c2\u6570\u6821\u9a8c, \u53ef\u4ee5\u5141\u8bb8\u4e24\u79cd\u7c7b\u578b\u53c2\u6570http://xxx/xxx/xxx.mar \u7f51\u7edc\u4f4d\u7f6e \u548cxxx.mar \u672c\u5730\u4f4d\u7f6e \u53ef\u4ee5\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u505a, \u9009\u62e9\u7528\u6b63\u5219 const httpMarReg = \"(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|].mar\" const localMarReg = \".*.mar\" var HttpMarRegexp *regexp.Regexp var LocalMarRegexp *regexp.Regexp func Init() { HttpMarRegexp = regexp.MustCompile(httpMarReg) LocalMarRegexp = regexp.MustCompile(localMarReg) }","title":"RegisterModelHandler CheckParam\u903b\u8f91"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#registermodelhandler-run","text":"\u6709\u4e24\u79cd\u65b9\u5f0f\u83b7\u53d6modelName \u4e00\u79cdgrpc\u7684\u8bf7\u6c42\u4f20\u53c2\uff0c\u53e6\u4e00\u79cd\u7ea6\u5b9a\u4ee5mar\u5305\u7684\u5305\u540d\uff0c\u6211\u4eec\u73b0\u5728\u505a\u4ee5\u5305\u540d\u7684\u65b9\u5f0f\u547d\u540d\u6a21\u578b\u540d package handler import ( \"context\" \"fmt\" \"log\" \"post_model_manage/consts\" \"post_model_manage/idl/post_model_manage\" \"post_model_manage/rpc\" \"strings\" ) type RegisterModelHandler struct { Request *post_model_manage.RegisterModelRequest Response *post_model_manage.RegisterModelResponse Ctx context.Context } func NewRegisterModelHandler(Ctx context.Context, Request *post_model_manage.RegisterModelRequest) *RegisterModelHandler { return &RegisterModelHandler{ Request: Request, Ctx: Ctx, Response: &post_model_manage.RegisterModelResponse{ Message: \"success\", Status: 0, }, } } func (h *RegisterModelHandler) Run() { err := h.CheckParam() if err != nil { h.Response.Status = 1 h.Response.Message = err.Error() return } modelUrl := h.Request.Url modelName := h.getModelName() toast, err := rpc.RegisterModel(h.Ctx, modelUrl, modelName) if err != nil { h.Response.Status = 1 h.Response.Message = err.Error() return } h.Response.Message = toast } func (h *RegisterModelHandler) getModelName() string { modelUrl := h.Request.Url modelName := \"\" marName := \"\" if consts.HttpMarRegexp.Match([]byte(modelUrl)) { httpPath := strings.Split(modelUrl, \"\\\\\") marName = httpPath[len(httpPath)-1] } else { marName = modelUrl } // \".mar\" modelName = marName[:len(marName)-4] return modelName } func (h *RegisterModelHandler) CheckParam() error { modelUrl := h.Request.Url if consts.HttpMarRegexp.Match([]byte(modelUrl)) { return nil } if consts.LocalMarRegexp.Match([]byte(modelUrl)) { return nil } return fmt.Errorf(\"modelUrl is valid:%s\", modelUrl) }","title":"RegisterModelHandler  Run \u903b\u8f91"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#handlergo","text":"func (s *Server) RegisterModel(ctx context.Context, request *post_model_manage.RegisterModelRequest) (*post_model_manage.RegisterModelResponse, error) { Handler := handler.NewRegisterModelHandler(ctx, request) Handler.Run() return Handler.Response, nil }","title":"\u5728handler.go\u4e2d\u5b9e\u73b0\u903b\u8f91"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#_2","text":"sh build.sh out/post_model_manage \u5206\u522b\u6d4b\u8bd5\u672c\u5730\u548c\u7f51\u7edc\u4f4d\u7f6e \u7531\u6b64grpc\u7684\u90e8\u5206\u5df2\u7ecf\u505a\u597d","title":"\u6d4b\u8bd5"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#api","text":"\u9996\u5148\u6211\u4eecgit clone\u4e0bapi\u4ee3\u7801","title":"API\u90e8\u5206"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#_3","text":"\u6211\u4eec\u5b9a\u4e49\u6ce8\u518c\u6a21\u578b\u8bf7\u6c42\u4e3apost\u8bf7\u6c42\u4e14 path\u5982\u4e0b /model/register model_url\u662fbody\u7684\u4e00\u4e2a\u5c5e\u6027 \u5728main.go\u4e2d\u6dfb\u52a0\u4e00\u4e2a r.POST(\"/model/register\", handler.RegisterModelHandler) \u7136\u540e\u5728handler\u91cc\u9762\u6dfb\u52a0\u4e00\u4e2a\u6587\u4ef6register_model_handler.go \u5728\u8be5\u6587\u4ef6\u4e2d\u6dfb\u52a0\u65b9\u6cd5RegisterModelHandler\uff0c \u4e8b\u5b9e\u4e0a\u4f60\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u63a5\u53e3\u4f53RegisterModelHandler\uff0c\u5e76\u66ff\u6362main.go\u4e2d\u7684\u51fd\u6570\u4e3ahandler wrapperRegisterModel, \u5728wrapperRegisterModelHandler \u8fdb\u884c\u53c2\u6570\u9a8c\u8bc1\uff0c\u5e76\u4e14\u751f\u6210\u4e00\u4e2aRegisterModelHandler\u6267\u884cRegisterModelHandler.RUN \u8fd9\u66f4\u52a0\u89c4\u8303\uff0c\u4f46\u662f\u6211\u61d2\u5f97\u8fd9\u4e2a\u641e\u4e86 package handler import ( \"net/http\" view_model \"postapi/model/view\" \"github.com/gin-gonic/gin\" ) type RegisterModelBody struct { ModelUrl string `json:\"model_url\"` } func RegisterModelHandler(c *gin.Context) { body := RegisterModelBody{} err := c.BindJSON(&body) if err != nil { c.JSON(http.StatusBadRequest, nil) return } toast, err := RegisterModel(c, &body) if err != nil { c.JSON(http.StatusInternalServerError, nil) return } resp := &view_model.CommonResult{ Message: toast, Status: 0, } c.JSON(http.StatusOK, resp) } func RegisterModel(ctx *gin.Context, body *RegisterModelBody) (string, error) { //\u8c03\u7528post_model_manage \u903b\u8f91 }","title":"\u5b9a\u4e49\u63a5\u53e3"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#post_model_manage","text":"\u9996\u5148\uff0c\u6211\u4eec\u66f4\u65b0rpc\u4f9d\u8d56 go get github.com/SpringTY/postrpc \u7136\u540e\u5728rpc/model_manage.go\u4e2d\u6dfb\u52a0RegisterModel\u65b9\u6cd5 func RegisterModel(ctx context.Context, modelUrl string) (string, error) { req := &post_model_manage.RegisterModelRequest{ Url: modelUrl, } resp, err := model_manage_client.RegisterModel(ctx, req) if err != nil { return \"\", err } else if resp.Status != 0 { return \"\", errors.New(resp.Message) } return resp.Message, nil } register_model.go\u4e2d\u903b\u8f91 func RegisterModel(ctx *gin.Context, body *RegisterModelBody) (string, error) { //\u8c03\u7528post_model_manage \u903b\u8f91 toast, err := rpc.RegisterModel(ctx, body.ModelUrl) if err != nil { return \"\", err } return toast, nil } \u6211\u7a0d\u7a0d\u6539\u52a8\u4e86\u4e00\u4e9bregister_model.go\u7684RegisterModelHandler\u903b\u8f91 \u89c1\u4ee3\u7801","title":"\u8c03\u7528post_model_manage"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#_4","text":"\u9996\u5148\u542f\u52a8rpc\u670d\u52a1 \u66f4\u6539\u6211\u4eec\u8c03\u7528rpc\u670d\u52a1\u7684\u5730\u5740\u4e3a\u672c\u5730\u8fdb\u884c\u6d4b\u8bd5 \u5730\u5740\u4e3arpc/model_manage.go \u7684model_manage_address\u53d8\u91cf go run main,go import http.client import json conn = http.client.HTTPSConnection(\"vm\", 7675) payload = json.dumps({ \"model_url\": \"greedy_time.mar\" }) headers = { 'Content-Type': 'application/json' } conn.request(\"POST\", \"/model/register\", payload, headers) res = conn.getresponse() data = res.read() print(data.decode(\"utf-8\")) \u6d4b\u8bd5\u63a5\u53e3","title":"\u6d4b\u8bd5"},{"location":"%E5%A6%82%E4%BD%95%E6%B7%BB%E5%8A%A0%E6%8E%A5%E5%8F%A3/#bugs","text":"\u521a\u624d\u53d1\u73b0\u5982\u679c\u52a0\u8f7d\u7f51\u7edc\u4f4d\u7f6e\u6a21\u578b\u4f1a\u5bfc\u81f4\u65e0\u6cd5\u6253\u5f00\u5217\u8868\uff0c\u5e76\u4e14\u6a21\u578b\u7684url\u4e0d\u6b63\u786e\uff0c\u73b0\u5728fix\u4e00\u4e0b","title":"bugs"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/","text":"\u5b9e\u9a8c\u5ba4GO\u73af\u5883\u76f8\u5173\u8d44\u6599 go \u5b89\u88c5\u4f4d\u7f6e /usr/local/go \u5df2\u7ecf\u5b89\u88c5\u4e86grpc consul \u662f\u4e00\u4e2axDS\u8f6f\u4ef6\uff0c\u53ef\u4ee5\u4f5c\u670d\u52a1\u53d1\u73b0 envoy \u662f\u4e00\u4e2a\u4ee3\u7406\u8f6f\u4ef6\uff0c\u5305\u62ec\u8d1f\u8f7d\u5747\u8861\u7b49\u7b56\u7565 \u6570\u636e\u5e93\u8bbe\u8ba1 |id| task_id| uid|time_tag|region_tag|arrive_time|region_type| \u4e0b\u5355\u65f6\u95f4 \u7ecf\u5ea6 \u7eac\u5ea6 \u533a\u5757\u7c7b\u578b \u4e0e\u6240\u5728\u8ba2\u5355\u7684\u76f4\u7ebf\u76f8\u5bf9\u8ddd\u79bb \u4e0e\u524d\u4e00\u5355\u7684\u76f4\u7ebf\u7edd\u5bf9\u8ddd\u79bb \u9884\u7ea6-\u63a5\u5355 \u9884\u7ea6-\u5f53\u524d day_tag, 20210401,13584,\u4e0a\u6d77\u5e02,2208775596316,2021-04-01 08:57:20,2021-04-01 11:00:00,2021-04-01 13:00:00,121.513188,31.308708000000006,24567482,3110,\u5c45\u6c11\u533a,2021-04-01 12:03:42,,,,,,,, docker docker \u67e5\u770b\u65e5\u5fd7 docker container logs docker exec -it bash 5a20ed4f947b docker exec -it f9e79c4c1448 bash \u8fd0\u884credis\u547d\u4ee4 docker run --name postredis -d -p 6379:6379 redis \u8fd0\u884cRocketMQ\u6307\u4ee4 # mq workspace MQ_SPACE=$(dirname $(readlink -f \"$0\")) echo MQ_SPACE:$MQ_SPACE # make if absent if [ ! -d $MQ_SPACE/namesrv/logs ]; then mkdir -p $MQ_SPACE/namesrv/logs fi # make if absent if [ ! -d $MQ_SPACE/namesrv/store ]; then mkdir -p $MQ_SPACE/namesrv/store fi # run namesrv docker run -d -p 9876:9876 -v $MQ_SPACE/namesrv/logs:/root/logs -v $MQ_SPACE/namesrv/store:/root/store --name rmqnamesrv -e \"MAX_POSSIBLE_HEAP=100000000\" rocketmqinc/rocketmq sh mqnamesrv # make if absent if [ ! -d $MQ_SPACE/broker/logs ]; then mkdir -p $MQ_SPACE/broker/logs fi # make if absent if [ ! -d $MQ_SPACE/broker/store ]; then mkdir -p $MQ_SPACE/broker/store fi # run broker docker run -d -p 10911:10911 -p 10909:10909 -v $MQ_SPACE/broker/logs:/root/logs -v $MQ_SPACE/broker/store:/root/store -v $MQ_SPACE/broker.conf:/opt/rocketmq/conf/broker.conf --link rmqnamesrv:namesrv -e \"NAMESRV_ADDR=211.71.76.189:9876\" -e \"MAX_POSSIBLE_HEAP=200000000\" rocketmqinc/rocketmq sh mqbroker -c /opt/rocketmq/conf/broker.conf # console docker run -d --name rocketmq-dashboard -e \"JAVA_OPTS=-Drocketmq.namesrv.addr=211.71.76.189:9876\" -p 8088:8080 -t apacherocketmq/rocketmq-dashboard:latest \u76d1\u63a7\u5730\u5740http://211.71.76.189:8088/#/topic Hbase Docker https://cloud.tencent.com/developer/article/1632053 docker run -d -h docker-hbase \\ -p 2181:2181 \\ -p 8011:8080 \\ -p 8085:8085 \\ -p 9090:9090 \\ -p 9000:9000 \\ -p 9095:9095 \\ -p 16000:16000 \\ -p 16010:16010 \\ -p 16201:16201 \\ -p 16301:16301 \\ -p 16020:16020\\ --name hbase \\ harisekhon/hbase:1.4 Hbase Dashboard http://211.71.76.189:16010/master-status Hbase \u8868\u683c 1 \u5feb\u9012\u5458\u6570\u636e\u8868\u683c create 'postman_test','id','post_arrive_info','day','region','post_id' Mysql docker run -p 3306:3306 --name post-mysql -v /data/MengQingqiang/postweb/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=669988 -d mysql:latest docker exec -it fc0f68f00544 bash mongo pass 123456 docker root sudo docker exec -ti -u root 70ce555dbfb1da80716db5bb1539b730b1d5964ab196323b3903d8b2b01e79ad bash \u8fd0\u884ctorchserve \u547d\u4ee4 \u524d\u53f0 docker run --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models torchserve:v1.1 torchserve --start --model-store /tmp/models/ --models greedy_time.mar,greedy_distance.mar,pointer_net.mar --no-config-snapshots \u540e\u53f0 docker run --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models torchserer:v1.2.1 torchserve --start --model-store /tmp/models/ --models greedy_distance.mar --no-config-snapshots sudo docker run -d --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models pytorch/torchserve:0.5.0-cpu torchserve --start --model-store /tmp/models/ --no-config-snapshots pytorch/torchserve \u6253\u5305\u547d\u4ee4 torch-model-archiver --model-name greedy --model-file ../serve/examples/image_classifier/greedy/greedy_distance.py --handler ../serve/examples/image_classifier/greedy/greedy_handler.py --runtime python3 --version 1.0 0 \u4e0d\u5b58\u5728 1 \u5df2\u521b\u5efa\u4efb\u52a1 2 \u9884\u5904\u7406\u5f00\u59cb 3 \u9884\u5904\u7406\u5b8c\u6210\uff0c\u5f00\u59cb\u751f\u6210\u6570\u636e 4 \u5b8c\u6210\u751f\u6210\u6570\u636e\uff0c\u5f00\u59cb\u5199\u6570\u636e\u5e93 5 \u5b8c\u6210 1. nnictl experiment show show the information of experiments 2. nnictl trial ls list all of trial jobs 3. nnictl top monitor the status of running experiments 4. nnictl log stderr show stderr log content 5. nnictl log stdout show stdout log content 6. nnictl stop stop an experiment 7. nnictl trial kill kill a trial job by id 8. nnictl --help get help information about nnictl sudo mount 10.126.56.9:/data/MengQingqiang/nni /data/MengQingqiang/mqq/nni nnictl create --config egcn_con.yml --port 9074 \u6062\u590d\u5bb9\u5668 # mysql: docker start fc0f68f00544 # rocketmq brocker docker start b95beabd4365 # rocketmq namesrv docker start 72120183816a # dashboard docker start 19329818936a # mongodb docker start f4b554eaafca # redis docker start bfaa84ad7062","title":"\u5b9e\u9a8c\u5ba4GO\u73af\u5883\u76f8\u5173\u8d44\u6599"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#_1","text":"|id| task_id| uid|time_tag|region_tag|arrive_time|region_type| \u4e0b\u5355\u65f6\u95f4 \u7ecf\u5ea6 \u7eac\u5ea6 \u533a\u5757\u7c7b\u578b \u4e0e\u6240\u5728\u8ba2\u5355\u7684\u76f4\u7ebf\u76f8\u5bf9\u8ddd\u79bb \u4e0e\u524d\u4e00\u5355\u7684\u76f4\u7ebf\u7edd\u5bf9\u8ddd\u79bb \u9884\u7ea6-\u63a5\u5355 \u9884\u7ea6-\u5f53\u524d day_tag, 20210401,13584,\u4e0a\u6d77\u5e02,2208775596316,2021-04-01 08:57:20,2021-04-01 11:00:00,2021-04-01 13:00:00,121.513188,31.308708000000006,24567482,3110,\u5c45\u6c11\u533a,2021-04-01 12:03:42,,,,,,,,","title":"\u6570\u636e\u5e93\u8bbe\u8ba1"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#docker","text":"docker \u67e5\u770b\u65e5\u5fd7 docker container logs docker exec -it bash 5a20ed4f947b docker exec -it f9e79c4c1448 bash","title":"docker"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#redis","text":"docker run --name postredis -d -p 6379:6379 redis","title":"\u8fd0\u884credis\u547d\u4ee4"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#rocketmq","text":"# mq workspace MQ_SPACE=$(dirname $(readlink -f \"$0\")) echo MQ_SPACE:$MQ_SPACE # make if absent if [ ! -d $MQ_SPACE/namesrv/logs ]; then mkdir -p $MQ_SPACE/namesrv/logs fi # make if absent if [ ! -d $MQ_SPACE/namesrv/store ]; then mkdir -p $MQ_SPACE/namesrv/store fi # run namesrv docker run -d -p 9876:9876 -v $MQ_SPACE/namesrv/logs:/root/logs -v $MQ_SPACE/namesrv/store:/root/store --name rmqnamesrv -e \"MAX_POSSIBLE_HEAP=100000000\" rocketmqinc/rocketmq sh mqnamesrv # make if absent if [ ! -d $MQ_SPACE/broker/logs ]; then mkdir -p $MQ_SPACE/broker/logs fi # make if absent if [ ! -d $MQ_SPACE/broker/store ]; then mkdir -p $MQ_SPACE/broker/store fi # run broker docker run -d -p 10911:10911 -p 10909:10909 -v $MQ_SPACE/broker/logs:/root/logs -v $MQ_SPACE/broker/store:/root/store -v $MQ_SPACE/broker.conf:/opt/rocketmq/conf/broker.conf --link rmqnamesrv:namesrv -e \"NAMESRV_ADDR=211.71.76.189:9876\" -e \"MAX_POSSIBLE_HEAP=200000000\" rocketmqinc/rocketmq sh mqbroker -c /opt/rocketmq/conf/broker.conf # console docker run -d --name rocketmq-dashboard -e \"JAVA_OPTS=-Drocketmq.namesrv.addr=211.71.76.189:9876\" -p 8088:8080 -t apacherocketmq/rocketmq-dashboard:latest \u76d1\u63a7\u5730\u5740http://211.71.76.189:8088/#/topic","title":"\u8fd0\u884cRocketMQ\u6307\u4ee4"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#hbase-docker","text":"https://cloud.tencent.com/developer/article/1632053 docker run -d -h docker-hbase \\ -p 2181:2181 \\ -p 8011:8080 \\ -p 8085:8085 \\ -p 9090:9090 \\ -p 9000:9000 \\ -p 9095:9095 \\ -p 16000:16000 \\ -p 16010:16010 \\ -p 16201:16201 \\ -p 16301:16301 \\ -p 16020:16020\\ --name hbase \\ harisekhon/hbase:1.4","title":"Hbase Docker"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#hbase-dashboard","text":"http://211.71.76.189:16010/master-status Hbase \u8868\u683c 1 \u5feb\u9012\u5458\u6570\u636e\u8868\u683c create 'postman_test','id','post_arrive_info','day','region','post_id'","title":"Hbase Dashboard"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#mysql","text":"docker run -p 3306:3306 --name post-mysql -v /data/MengQingqiang/postweb/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=669988 -d mysql:latest docker exec -it fc0f68f00544 bash mongo pass 123456","title":"Mysql"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#docker-root","text":"sudo docker exec -ti -u root 70ce555dbfb1da80716db5bb1539b730b1d5964ab196323b3903d8b2b01e79ad bash","title":"docker root"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#torchserve","text":"\u524d\u53f0 docker run --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models torchserve:v1.1 torchserve --start --model-store /tmp/models/ --models greedy_time.mar,greedy_distance.mar,pointer_net.mar --no-config-snapshots \u540e\u53f0 docker run --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models torchserer:v1.2.1 torchserve --start --model-store /tmp/models/ --models greedy_distance.mar --no-config-snapshots sudo docker run -d --rm -it -p 6080:8080 -p 6081:8081 -p 6082:8082 -p 7070:7070 -p 7071:7071 --volume /data/MengQingqiang/rpc/model_store:/tmp/models pytorch/torchserve:0.5.0-cpu torchserve --start --model-store /tmp/models/ --no-config-snapshots pytorch/torchserve \u6253\u5305\u547d\u4ee4 torch-model-archiver --model-name greedy --model-file ../serve/examples/image_classifier/greedy/greedy_distance.py --handler ../serve/examples/image_classifier/greedy/greedy_handler.py --runtime python3 --version 1.0 0 \u4e0d\u5b58\u5728 1 \u5df2\u521b\u5efa\u4efb\u52a1 2 \u9884\u5904\u7406\u5f00\u59cb 3 \u9884\u5904\u7406\u5b8c\u6210\uff0c\u5f00\u59cb\u751f\u6210\u6570\u636e 4 \u5b8c\u6210\u751f\u6210\u6570\u636e\uff0c\u5f00\u59cb\u5199\u6570\u636e\u5e93 5 \u5b8c\u6210 1. nnictl experiment show show the information of experiments 2. nnictl trial ls list all of trial jobs 3. nnictl top monitor the status of running experiments 4. nnictl log stderr show stderr log content 5. nnictl log stdout show stdout log content 6. nnictl stop stop an experiment 7. nnictl trial kill kill a trial job by id 8. nnictl --help get help information about nnictl sudo mount 10.126.56.9:/data/MengQingqiang/nni /data/MengQingqiang/mqq/nni nnictl create --config egcn_con.yml --port 9074","title":"\u8fd0\u884ctorchserve \u547d\u4ee4"},{"location":"%E5%AE%9E%E9%AA%8C%E5%AE%A4GO%E7%8E%AF%E5%A2%83%E7%9B%B8%E5%85%B3%E8%B5%84%E6%96%99/#_2","text":"# mysql: docker start fc0f68f00544 # rocketmq brocker docker start b95beabd4365 # rocketmq namesrv docker start 72120183816a # dashboard docker start 19329818936a # mongodb docker start f4b554eaafca # redis docker start bfaa84ad7062","title":"\u6062\u590d\u5bb9\u5668"},{"location":"%E6%8F%BD%E4%BB%B6%E5%B9%B3%E5%8F%B0/","text":"\u9996\u5148\u63fd\u4ef6\u5e73\u53f0\u524d\u7aef\u90e8\u7f72\u5728211.71.76.189\u670d\u52a1\u5668\u4e0a \u7b97\u6cd5\u63a5\u5165 \u5982\u679c\u9700\u8981\u63a5\u5165\u6a21\u578b\u5230\u8be5\u5e73\u53f0(\u53ef\u4ee5\u662f\u4efb\u4f55torch\u7b97\u6cd5) \u9996\u5148\u9700\u8981\u6253\u5305\u6210\u4e3amar\u5305\uff0c\u6253\u5305\u90e8\u5206\u6e29\u5e08\u5144\u6709\u4e00\u4e2a\u6587\u6863\u4ecb\u7ecd \u9ed8\u8ba4\u4f7f\u7528\u8005\u5f97\u5230\u4e86mar\u5305\u7a0b\u5e8f\uff0c\u628amar\u5305\u653e\u5728\u4efb\u610f\u7f51\u7edc\u4f4d\u7f6ehttp\u670d\u52a1\u6216\u8005\u5728189 \u670d\u52a1\u5668/data/MengQingqiang/rpc/model_store\u8def\u5f84\u4e0b \u5bfc\u5165\u5230\u7cfb\u7edf\uff1a\u5982\u679c\u91c7\u7528http\u670d\u52a1 \u5c31\u662f\u5168\u8def\u5f84 \u5982\u679c\u91c7\u7528\u653e\u5728\u670d\u52a1\u5668\u672c\u5730 \u5c31\u662f\u6587\u4ef6\u540d \u65b9\u5f0f1. \u91c7\u7528torchserve api : \u65b9\u5f0f2. \u524d\u7aef(\u5c1a\u672a\u652f\u6301) \u65b9\u5f0f3.postapi(\u7b49\u5f85\u524d\u7aef\u90e8\u7f72) \u7b97\u6cd5\u7ba1\u7406 \u8be5\u754c\u9762\u5305\u542b\u6a21\u578b\u6a21\u578b\u7684\u5378\u8f7d\u3001\u5b9e\u4f8b\u8c03\u6574\u7b49\u529f\u80fd \u7b97\u6cd5\u8c03\u7528 \u8c03\u7528\u539f\u751ftorchserve http api \u53c2\u8003\u6587\u6863 https://pytorch.org/serve/inference_api.html#predictions-api","title":"\u63fd\u4ef6\u5e73\u53f0"},{"location":"%E6%8F%BD%E4%BB%B6%E5%B9%B3%E5%8F%B0/#_1","text":"\u5982\u679c\u9700\u8981\u63a5\u5165\u6a21\u578b\u5230\u8be5\u5e73\u53f0(\u53ef\u4ee5\u662f\u4efb\u4f55torch\u7b97\u6cd5) \u9996\u5148\u9700\u8981\u6253\u5305\u6210\u4e3amar\u5305\uff0c\u6253\u5305\u90e8\u5206\u6e29\u5e08\u5144\u6709\u4e00\u4e2a\u6587\u6863\u4ecb\u7ecd \u9ed8\u8ba4\u4f7f\u7528\u8005\u5f97\u5230\u4e86mar\u5305\u7a0b\u5e8f\uff0c\u628amar\u5305\u653e\u5728\u4efb\u610f\u7f51\u7edc\u4f4d\u7f6ehttp\u670d\u52a1\u6216\u8005\u5728189 \u670d\u52a1\u5668/data/MengQingqiang/rpc/model_store\u8def\u5f84\u4e0b \u5bfc\u5165\u5230\u7cfb\u7edf\uff1a\u5982\u679c\u91c7\u7528http\u670d\u52a1 \u5c31\u662f\u5168\u8def\u5f84 \u5982\u679c\u91c7\u7528\u653e\u5728\u670d\u52a1\u5668\u672c\u5730 \u5c31\u662f\u6587\u4ef6\u540d \u65b9\u5f0f1. \u91c7\u7528torchserve api : \u65b9\u5f0f2. \u524d\u7aef(\u5c1a\u672a\u652f\u6301) \u65b9\u5f0f3.postapi(\u7b49\u5f85\u524d\u7aef\u90e8\u7f72)","title":"\u7b97\u6cd5\u63a5\u5165"},{"location":"%E6%8F%BD%E4%BB%B6%E5%B9%B3%E5%8F%B0/#_2","text":"\u8be5\u754c\u9762\u5305\u542b\u6a21\u578b\u6a21\u578b\u7684\u5378\u8f7d\u3001\u5b9e\u4f8b\u8c03\u6574\u7b49\u529f\u80fd","title":"\u7b97\u6cd5\u7ba1\u7406"},{"location":"%E6%8F%BD%E4%BB%B6%E5%B9%B3%E5%8F%B0/#_3","text":"\u8c03\u7528\u539f\u751ftorchserve http api \u53c2\u8003\u6587\u6863 https://pytorch.org/serve/inference_api.html#predictions-api","title":"\u7b97\u6cd5\u8c03\u7528"}]}